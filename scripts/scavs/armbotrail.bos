#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, rail, flare, round, door;

static-var   restore_delay;

// Signal definitions
#define SIG_AIM				2

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}



Create()
{
	hide flare;
	restore_delay = 2000;
	//move door to z-axis [-30] now;
	start-script SmokeUnit();
}


SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 3;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <5.000000>;
	turn rail to x-axis <0> - pitch speed <3.5>;
	wait-for-turn turret around y-axis;
	wait-for-turn rail around x-axis;
	return (1);
}

Shot1()
{
	hide round;
	emit-sfx 1024 + 0 from flare;
	move door to z-axis [-15] speed [440];//-52.5
	move round to z-axis [-15] now;
	//sleep 25;
	show round;
	wait-for-move door along z-axis;
	move round to z-axis [0] speed [125] ;
	wait-for-move round along z-axis;
	move door to z-axis [0] speed [125];
}

FirePrimary()
{
//	hide round;
//	sleep 200;
//	move door to z-axis [-30] speed [180];//-52.5
//	move round to z-axis [-30] now;
//	show round;
//	wait-for-move door along z-axis;
//	move round to z-axis [0] speed [180];
//	wait-for-move round along z-axis;
//	move door to z-axis [0] speed [180];
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimFromPrimary(piecenum)
{
	piecenum = flare;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode rail type BITMAPONLY | NOHEATCLOUD;
		explode round type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rail type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode round type FALL | NOHEATCLOUD;
		explode flare type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rail type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode round type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rail type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode round type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}