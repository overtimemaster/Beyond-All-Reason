#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, tube, door1, door2, flare1, flare2, flare3, aimpoint;

static-var  Static_Var_1, restore_delay, statechg_DesiredState, statechg_StateChanging, firepoint;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}


Go()
{
	set ARMORED to 0;
	
	move tube to y-axis [0] speed [18];
	wait-for-move tube along y-axis;
	
	turn door1 to x-axis <0> speed <300>;
	turn door2 to x-axis <0> speed <300>;
	wait-for-turn door2 around x-axis;
	
	Static_Var_1 = 1;
}

Stop()
{
	set ARMORED to 1;
	Static_Var_1 = 0;
	turn tube to y-axis <0.000000> speed <300.000000>;
	wait-for-turn tube around y-axis;
	
	turn door1 to x-axis <-90> speed <300>;
	turn door2 to x-axis <90> speed <300>;
	
	move tube to y-axis [-9] speed [18];
	wait-for-move tube along y-axis;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide aimpoint;
	hide flare3;
	hide flare2;
	hide flare1;
	restore_delay = 2000;
	Static_Var_1 = 0;
	call-script InitState();
	start-script RequestState(0);
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
	
	firepoint = 0;
	
	start-script SmokeUnit();
	start-script RequestState(1);
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 3;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	start-script RequestState(1);
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 100;
	}
	// dont need turn
	//turn post to y-axis heading speed <300.000000>;
	//wait-for-turn post around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

Shot1()
{
	return (TRUE);
}

FirePrimary()
{
	firepoint = firepoint + 1;
	if (firepoint >= 3) firepoint = 0;
}

QueryPrimary(piecenum)
{
	if (firepoint == 0 ) piecenum = flare1;
	if (firepoint == 1 ) piecenum = flare2;
	if (firepoint == 2 ) piecenum = flare3;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimFromPrimary(piecenum)
{
	piecenum = aimpoint;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode tube type BITMAPONLY | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode tube type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door1 type FALL | NOHEATCLOUD;
		explode door2 type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode tube type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode tube type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}