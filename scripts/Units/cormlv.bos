#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SIG_BUILD		2	

piece  base, turret, tracks, beamhinge, beamcase, flare;

static-var  notBuilding, bMoving, statechg_DesiredState, statechg_StateChanging;

static-var animSpeed, maxSpeed, animFramesPerKeyframe;


#define BASEPIECE base
#define HITSPEED <65.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

Go()
{
	turn beamcase to z-axis <-90> speed <180>;
	wait-for-turn beamcase around z-axis;
	
	turn beamhinge to x-axis <90> speed <360>;
	wait-for-turn beamhinge around x-axis;
}

Stop()
{
	set INBUILDSTANCE to 0;
	
	turn beamhinge to x-axis <0> speed <360>;
	wait-for-turn beamhinge around x-axis;	

	turn beamcase to z-axis <0> speed <180>;
	wait-for-turn beamcase around z-axis;
	

	
	turn turret to y-axis <0.000000> speed <160.000000>;
	wait-for-turn turret around y-axis;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script Stop();
			notBuilding = 1;
			currentstate = 1;
		}
		else
		{
			call-script Go();
			notBuilding = 0;
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide flare;
	bMoving = FALSE;
	notBuilding = 1;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	animSpeed = 4;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(heading, pitch)
{
	start-script RequestState(0);
	while( notBuilding ) sleep 100;
	signal SIG_BUILD;
	turn turret to y-axis heading speed <600.000000>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_BUILD;	
	start-script RequestState(1);
}

StartMoving()
{
 return (0);
}

StopMoving()
{
 return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = flare;
}

AimPrimary(heading, pitch)
{
	turn turret to y-axis heading speed <300>;
	wait-for-turn turret around y-axis;
	return (1);
}

/*
TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}
*/

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode beamhinge type BITMAPONLY | NOHEATCLOUD;
		explode beamcase type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode beamhinge type BITMAPONLY | NOHEATCLOUD;
		explode beamcase type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode beamhinge type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode beamcase type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode beamhinge type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode beamcase type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		return corpsetype;
}
