#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flarea, barrelb1, barrelb2, barrelb3, base, guna, turreta, turretb,
       flareb1, flareb2, flareb3, wake, bow, sleeveb1, sleeveb2, sleeveb3, sleevea, barrela1, barrela2, barrela3;

static-var  gun_2, bAiming, restore_delay, gun_1, Static_Var_7, Static_Var_8, aimDir;

// Signal definitions
#define SIG_AIM_2			2
#define SIG_AIM				4
#define SIG_MOVE			8

#define BASEPIECE base
#define HITSPEED <20.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 10
#define MAXTILT 200

#include "unit_hitbyweaponid_and_smoke.h"

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.11> )
		{
			rockSpeed = <1.25> - get ABS(rockAng);
			turn base to x-axis rockAng speed rockSpeed*2;
			wait-for-turn base around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}


ProjXPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -21840 )
	{
		Static_Var_7 = Func_Var_1 * ( Func_Var_2 + 32760 ) / 10920;
	}
	else if( Func_Var_2 > 21840 )
	{
		Static_Var_7 = Func_Var_1 * ( 32760 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -10920 )
	{
		Static_Var_7 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 10920 )
	{
		Static_Var_7 = Func_Var_1;
	}
	else
	{
		Static_Var_7 = Func_Var_1 * Func_Var_2 / 10920;
	}
}

RockZ(Func_Var_1, Func_Var_2)
{
	signal 16;
	set-signal-mask 16;
	call-script ProjXPW(10920 / Func_Var_2,Func_Var_1);
	Static_Var_8 = Static_Var_8 + Static_Var_7;
	Static_Var_7 = get ABS(Static_Var_8);
	while( Static_Var_7 > 91 )
	{
		turn base to z-axis Static_Var_8 speed Static_Var_7 * 2;
		wait-for-turn base around z-axis;
		Static_Var_8 = Static_Var_8 * -1 / 2;
		Static_Var_7 = get ABS(Static_Var_8);
	}
	turn base to z-axis <0.000000> speed <1.5>;
}

Create()
{
	hide bow;
	hide flareb3;
	hide flareb1;
	hide flareb2;
	hide flarea;
	hide wake;
	hide flarea;
	hide flareb1;
	hide flareb2;
	hide flareb3;
	gun_2 = 1;
	bAiming = 0;
	gun_1 = 0;
	restore_delay = 3000;	
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 3;
}
// XXXXXXXXX

//-------------------------------CONSTANT ACCELERATION TURRET TURNING---------------------------
// MaxVelocity and acceleration are in degrees per frame (not second!)
// Jerk is the minimum velocity of the turret
// A high precision requirement can result in overshoots if desired 
// (c) CC BY NC ND Beherith mysterme@gmail.com
#define MAX_AIMY1_VELOCITY <2.20>
#define AIMY1_ACCELERATION <0.13>
#define AIMY1_JERK <0.5>
#define AIMY1_PRECISION <1.2>
#define AIMY1_RESTORE_SPEED <1.0>

static-var aimy1delta, timetozero, deceleratethreshold;
static-var aimy1velocity, aimy1target, aimy1position, gameFrame;
static-var  Stunned;

ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn sleeveb1 to x-axis <0.000000> speed <30.000000>;
	turn sleeveb2 to x-axis <0.000000> speed <30.000000>;
	turn sleeveb3 to x-axis <0.000000> speed <30.000000>;
	while ( get ABS(aimy1position) > AIMY1_RESTORE_SPEED){
		if (aimy1position > 0 ) {
			aimy1position = aimy1position - AIMY1_RESTORE_SPEED;
			aimy1velocity = (-1) * AIMY1_RESTORE_SPEED;
		}
		else
		{
			aimy1position = aimy1position + AIMY1_RESTORE_SPEED;
			aimy1velocity = AIMY1_RESTORE_SPEED;
		}
		turn turretb to y-axis aimy1position speed 30 * AIMY1_RESTORE_SPEED;
		aimDir = aimy1position;
		sleep 30;
	}
	aimy1velocity = 0;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{

	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	//bAiming = TRUE;
	//signal SIG_HEAD;
	//We can do this any time
	turn sleeveb1 to x-axis <0.000000> - pitch speed <30.000000>;
	turn sleeveb2 to x-axis <0.000000> - pitch speed <30.000000>;
	turn sleeveb3 to x-axis <0.000000> - pitch speed <30.000000>;
	
	aimy1target = heading;
	aimy1delta = aimy1target - aimy1position;

	while( ( get ABS(aimy1delta) > AIMY1_PRECISION ) OR (get ABS(aimy1velocity) > AIMY1_JERK)){
		if (gameFrame != get(GAME_FRAME)){ //this is to make sure we dont get double-called, as previous aimweapon thread runs before new aimweaponthread can signal-kill previous one 
			gameFrame = get(GAME_FRAME);
	
			//Clamp aimy1position and aimy1delta between <-180>;<180>
			while (aimy1position >  <180>) aimy1position = aimy1position - <360>;
			while (aimy1position < <-180>) aimy1position = aimy1position + <360>;
			while (aimy1delta >  <180>) aimy1delta = aimy1delta - <360>;
			while (aimy1delta < <-180>) aimy1delta = aimy1delta + <360>;
		
			//number of frames required to decelerate to 0
			timetozero = get ABS(aimy1velocity) / AIMY1_ACCELERATION;
			
			//distance from target where we should start decelerating, always 'positive'
			//pos = t * v - (t*(t-1)*a/2)
			deceleratethreshold = timetozero * (get ABS(aimy1velocity)) - (timetozero * (timetozero - 1) * AIMY1_ACCELERATION / 2); 
			
			//get PRINT ( aimy1delta , deceleratethreshold, aimy1velocity, timetozero );
			
			if (get ABS(aimy1delta) <= deceleratethreshold){ //we need to decelerate
				if (aimy1velocity > 0) aimy1velocity = aimy1velocity - AIMY1_ACCELERATION;
				else 				   aimy1velocity = aimy1velocity + AIMY1_ACCELERATION;
			}	
			else //we need to accelerate
			{
				if (aimy1delta > 0) aimy1velocity = get MIN(       MAX_AIMY1_VELOCITY, aimy1velocity + AIMY1_ACCELERATION); 
				else                aimy1velocity = get MAX((-1) * MAX_AIMY1_VELOCITY, aimy1velocity - AIMY1_ACCELERATION);
			}
			
			//Apply jerk at very low velocities
			if (get ABS(aimy1velocity) < AIMY1_JERK){
				if ((aimy1delta >        AIMY1_JERK)) aimy1velocity =        AIMY1_JERK;
				if ((aimy1delta < (-1) * AIMY1_JERK)) aimy1velocity = (-1) * AIMY1_JERK;
			}
			
			aimy1position = aimy1position + aimy1velocity; 
			aimDir = aimy1position;
			turn turretb to y-axis aimy1position now;
			aimy1delta = aimy1target - aimy1position ; 	
		}
		sleep 30;
	}
	aimy1velocity = 0;
	while( gun_1 )
	{
		wait-for-move barrelb1 along z-axis;
		wait-for-move barrelb2 along z-axis;
		wait-for-move barrelb3 along z-axis;
		bAiming = 0;
		gun_1 = 0;
	}
	start-script RestoreAfterDelay();
	return (1);
}

// XXXXXXXXX

RestoreSecondary()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn turreta to y-axis <0.000000> speed <100.000000>;
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-1.0> speed <1.0>;
		move base to y-axis [0.23] speed [0.17];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <1.0>;
		move base to y-axis [0.0] speed [0.17];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	start-script waveSplash();
	var bowtime;
	bowtime = 0;
	while( TRUE )
	{
		emit-sfx 1024 + 1 from wake;
		if (bowtime) emit-sfx 1024 + 2 from bow;
        bowtime = !bowtime;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 12000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.0> speed <1.0>;
	move base to y-axis [0.0] speed [0.17];
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turreta to y-axis heading speed <200.000000>;
	wait-for-turn turreta around y-axis;
	start-script RestoreSecondary();
	return (1);
}



FireSecondary()
{
	if( gun_2 == 0 )
	{
		sleep 250;
		turn guna to z-axis <0.000000> speed <400.000000>;
		wait-for-turn guna around z-axis;
	}
	else if( gun_2 == 1 )
	{
		sleep 250;
		turn guna to z-axis <120.027473> speed <400.000000>;
		wait-for-turn guna around z-axis;
	}
	else if( gun_2 == 2 )
	{
		sleep 250;
		turn guna to z-axis <-120.027473> speed <400.000000>;
		wait-for-turn guna around z-axis;
	}
	++gun_2;
	if( gun_2 >= 3 ) gun_2 = 0;
}

FirePrimary()
{
	start-script RockZ(-13, aimDir);
	if( bAiming == 0 )
	{
	    emit-sfx 1024 + 0 from flareb1;
		move barrelb1 to z-axis [-2.500000] now;
		sleep 100;
		move barrelb1 to z-axis [0.000000] speed [1.000000];
	}
	else if( bAiming == 1 )
	{
	    emit-sfx 1024 + 0 from flareb2;
		move barrelb2 to z-axis [-2.500000] now;
		sleep 100;
		move barrelb2 to z-axis [0.000000] speed [1.000000];
	}
	else if( bAiming == 2 )
	{
	    emit-sfx 1024 + 0 from flareb3;
		gun_1 = 1;
		move barrelb3 to z-axis [-2.500000] now;
		sleep 100;
		move barrelb3 to z-axis [0.000000] speed [1.000000];
	}
	++bAiming;
}

AimFromSecondary(piecenum)
{
	piecenum = turreta;
}

QuerySecondary(piecenum)
{
	piecenum = flarea;
}

AimFromPrimary(piecenum)
{
	piecenum = turretb;
}

QueryPrimary(piecenum)
{
	piecenum = flareb1 + bAiming;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turreta type BITMAPONLY | NOHEATCLOUD;
		explode sleevea type BITMAPONLY | NOHEATCLOUD;
		explode guna type BITMAPONLY | NOHEATCLOUD;
		explode barrela3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrela2 type BITMAPONLY | NOHEATCLOUD;
		explode barrela1 type BITMAPONLY | NOHEATCLOUD;
		//explode flarea type BITMAPONLY | NOHEATCLOUD;
		//explode turretb type BITMAPONLY | NOHEATCLOUD;
		//explode sleeveb2 type BITMAPONLY | NOHEATCLOUD;
		//explode barrelb2 type BITMAPONLY | NOHEATCLOUD;
		//explode flareb2 type BITMAPONLY | NOHEATCLOUD;
		//explode sleeveb3 type BITMAPONLY | NOHEATCLOUD;
		//explode barrelb3 type BITMAPONLY | NOHEATCLOUD;
		//explode flareb3 type BITMAPONLY | NOHEATCLOUD;
		//explode sleeveb1 type BITMAPONLY | NOHEATCLOUD;
		//explode barrelb1 type BITMAPONLY | NOHEATCLOUD;
		//explode flareb1 type BITMAPONLY | NOHEATCLOUD;
		//explode wake type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turreta type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleevea type FALL | NOHEATCLOUD;
		explode guna type FALL | NOHEATCLOUD;
		explode barrela3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrela2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrela1 type FALL | NOHEATCLOUD;
		//explode flarea type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode sleeveb2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrelb2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flareb2 type FALL | NOHEATCLOUD;
		//explode sleeveb3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrelb3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flareb3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode sleeveb1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrelb1 type FALL | NOHEATCLOUD;
		//explode flareb1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turreta type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode sleevea type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode guna type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrela3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrela2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode barrela1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode flarea type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode turretb type BITMAPONLY | NOHEATCLOUD;
		//explode sleeveb2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrelb2 type SMOKE | FALL | NOHEATCLOUD;
		//explode flareb2 type SMOKE | FALL | NOHEATCLOUD;
		//explode sleeveb3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrelb3 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode flareb3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode sleeveb1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode barrelb1 type SMOKE | FALL | NOHEATCLOUD;
		//explode flareb1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turreta type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleevea type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode guna type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrela3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrela2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrela1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flarea type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode turretb type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode sleeveb2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrelb2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flareb2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode sleeveb3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrelb3 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flareb3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode sleeveb1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrelb1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flareb1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
