#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, base, turret, sleeve1, sleeve2, depthturret, depthflare, barrel1, barrel2, ground, wake, bow;

static-var  gun_1, restore_delay, aimDir, Static_Var_4, Static_Var_5, oldHead;

// Signal definitions
#define SIG_AIM			2
#define SIG_MOVE		4
#define SIG_ROCK		8


#define BASEPIECE base
#define HITSPEED <25.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 200

#include "unit_hitbyweaponid_and_smoke.h"

ProjXPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -21840 )
	{
		Static_Var_4 = Func_Var_1 * ( Func_Var_2 + 32760 ) / 10920;
	}
	else if( Func_Var_2 > 21840 )
	{
		Static_Var_4 = Func_Var_1 * ( 32760 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -10920 )
	{
		Static_Var_4 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 10920 )
	{
		Static_Var_4 = Func_Var_1;
	}
	else
	{
		Static_Var_4 = Func_Var_1 * Func_Var_2 / 10920;
	}
}

RockZ(Func_Var_1, Func_Var_2)
{
	signal SIG_ROCK;
	set-signal-mask SIG_ROCK;
	call-script ProjXPW(10920 / Func_Var_2,Func_Var_1);
	Static_Var_5 = Static_Var_5 + Static_Var_4;
	Static_Var_4 = get ABS(Static_Var_5);
	while( Static_Var_4 > 91 )
	{
		turn base to z-axis Static_Var_5 speed Static_Var_4 * <0.016484>;
		wait-for-turn base around z-axis;
		Static_Var_5 = Static_Var_5 * -1 / 2;
		Static_Var_4 = get ABS(Static_Var_5);
	}
	turn base to z-axis <0.000000> speed <1.5>;
}

SetDirection(heading)
{
	var spd;
	spd = (get ABS(oldHead) - get ABS(heading)) / 2;
	turn ground to y-axis heading speed spd;
	turn base to y-axis 0-heading speed spd;
	oldHead = heading;
}

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn ground to x-axis rockAng speed rockSpeed*4;
			wait-for-turn ground around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}

Create()
{
	hide bow;
	hide wake;
	hide depthflare;
	hide flare2;
	hide flare1;
	hide ground;
	hide flare1;
	hide flare2;
	gun_1 = flare1;
	restore_delay = 3000;
	Static_Var_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <35.000000>;
	turn sleeve1 to x-axis <0.000000> speed <15.000000>;
	turn sleeve2 to x-axis <0.000000> speed <15.000000>;

	turn depthturret to y-axis <0.000000> speed <35.000000>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-3.0> speed <3.0>;
		move base to y-axis [0.32] speed [0.32];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <3.0>;
		move base to y-axis [0.0] speed [0.32];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
    signal SIG_MOVE;
    set-signal-mask SIG_MOVE;
    var waketime;
    start-script waveSplash();
    var bowtime;
    bowtime = 0;
    while( TRUE )
    {
        emit-sfx 1024 + 1 from wake;
        if (bowtime) emit-sfx 1024 + 2 from bow;
        bowtime = !bowtime;
        waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
        if( waketime < 50 ) waketime = 50;
        sleep 12000 / waketime;
    }
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.0> speed <3.0>;
	move base to y-axis [0.0] speed [0.32];
}

AimSecondary(heading, pitch)
{


	turn depthturret to y-axis heading speed <180.000000>;
	wait-for-turn depthturret around y-axis;
	return (1);
}

AimFromSecondary(piecenum)
{
	piecenum = base;
}

QuerySecondary(piecenum)
{
	piecenum = depthflare;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <100.000000>;
	turn sleeve1 to x-axis <0.000000> - pitch speed <40.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <40.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve1 around x-axis;
	wait-for-turn sleeve2 around x-axis;
	aimDir = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	start-script RockZ(-9,aimDir);
	if( gun_1 )
	{
	    emit-sfx 1024 + 0 from flare1;
		move barrel2 to z-axis [-3.000000] speed [500.000000];
		wait-for-move barrel2 along z-axis;
		move barrel2 to z-axis [0.000000] speed [3.000000];
	}
	else
	{
	    emit-sfx 1024 + 0 from flare2;
		move barrel1 to z-axis [-3.000000] speed [500.000000];
		wait-for-move barrel1 along z-axis;
		move barrel1 to z-axis [0.000000] speed [3.000000];
	}
	gun_1 = !gun_1;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare1 + gun_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode ground type BITMAPONLY | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode depthturret type BITMAPONLY | NOHEATCLOUD;
		explode depthflare type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve2 type BITMAPONLY | NOHEATCLOUD;
		explode barrel2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare2 type BITMAPONLY | NOHEATCLOUD;
		//explode sleeve1 type BITMAPONLY | NOHEATCLOUD;
		//explode barrel1 type BITMAPONLY | NOHEATCLOUD;
		//explode flare1 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode ground type FALL | NOHEATCLOUD;
		explode depthturret type FALL | NOHEATCLOUD;
		explode depthflare type FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve2 type FALL | NOHEATCLOUD;
		explode barrel2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode sleeve1 type FALL | NOHEATCLOUD;
		//explode barrel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare1 type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode depthturret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode depthflare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode sleeve1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrel1 type SMOKE | FALL | NOHEATCLOUD;
		//explode flare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode ground type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode depthturret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode depthflare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode sleeve1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrel1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
