#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, arm1, arm2, arm3, link, door1, door2, door3, magnet, arm4, arm5, arm6, arm7, ground, wake;

static-var  Static_Var_1, TurretToUnitDistance, TurretToUnitAngleY, TurretToUnitAngleX, bInDistance;

// Signal definitions
#define SIG_MOVE			2


#define BASEPIECE base
#define HITSPEED <25.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 7
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn ground to x-axis rockAng speed rockSpeed*3;
			wait-for-turn ground around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}


Create()
{
	hide wake;
	hide link;
	hide ground;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-3.0> speed <3.0>;
		move base to y-axis [0.35] speed [0.25];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <3.0>;
		move base to y-axis [0.0] speed [0.25];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 1024 + 1 from wake;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 10000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.0> speed <3.0>;
	move base to y-axis [0.0] speed [0.25];
}

SweetSpot(piecenum)
{
	piecenum = base;
}

StartDoorOpen()
{
	signal 4;
	set-signal-mask 4;
	move door3 to z-axis [-20] speed [30];
	move door2 to z-axis [-20] speed [30];
	sleep 3000;
	move door3 to z-axis [0] speed [30];
	move door2 to z-axis [0] speed [30];
}

BoomCalc(posxz, posy)
{
	var Func_Var_3, Func_Var_4, Func_Var_5;
	Func_Var_3 = get PIECE_XZ(turret) - posxz;
	Func_Var_4 = posy - get PIECE_Y(turret) + [5.000000];
	Func_Var_5 = get XZ_HYPOT(Func_Var_3);
	TurretToUnitDistance = get HYPOT(Func_Var_5,Func_Var_4) - [15.000000];
	TurretToUnitAngleY = get XZ_ATAN(Func_Var_3);
	TurretToUnitAngleX = get ATAN(Func_Var_4,Func_Var_5);
	bInDistance = TurretToUnitDistance < [220.000000]; //MAX distance at which a unit is picked up/put down
	//get PRINT(1,bInDistance,TurretToUnitDistance/65000);
	//get PRINT(1,TurretToUnitAngleX/182, TurretToUnitAngleY/182);
}

BoomExtend()
{
	start-script StartDoorOpen();
	turn arm1 to x-axis TurretToUnitAngleX speed <280.000000>;
	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed <200.000000>;
	wait-for-turn turret around y-axis;
	move arm2 to z-axis -1*TurretToUnitDistance / 6 speed [60.000000];
	move arm3 to z-axis -1*TurretToUnitDistance / 6 speed [60.000000];
	move arm4 to z-axis -1*TurretToUnitDistance / 6 speed [60.000000];
	move arm5 to z-axis -1*TurretToUnitDistance / 6 speed [60.000000];
	move arm6 to z-axis -1*TurretToUnitDistance / 6 speed [60.000000];
	move arm7 to z-axis -1*TurretToUnitDistance / 6 speed [60.000000];

	wait-for-move arm2 along z-axis;
	wait-for-move arm3 along z-axis;
	wait-for-move arm4 along z-axis;
	wait-for-move arm5 along z-axis;
	wait-for-move arm6 along z-axis;
	wait-for-move arm7 along z-axis;
}

BoomReset()
{
	turn arm1 to x-axis <0.000000> speed <60.000000>;
	
	wait-for-turn arm1 around x-axis;
	turn turret to y-axis <0.000000> speed <200.000000>;
	move arm2 to z-axis [0.000000] speed [50.000000];
	move arm3 to z-axis [0.000000] speed [50.000000];
	move arm4 to z-axis [0.000000] speed [50.000000];
	move arm5 to z-axis [0.000000] speed [50.000000];
	move arm6 to z-axis [0.000000] speed [50.000000];
	move arm7 to z-axis [0.000000] speed [50.000000];
	wait-for-turn turret around y-axis;
	wait-for-move arm2 along z-axis;
	wait-for-move arm3 along z-axis;
	wait-for-move arm4 along z-axis;
	wait-for-move arm5 along z-axis;
	wait-for-move arm6 along z-axis;
	wait-for-move arm7 along z-axis;
}

BoomToPad()
{
	start-script StartDoorOpen();
	turn arm1 to x-axis <0.000000> speed <60.000000>;
	
	wait-for-turn arm1 around x-axis;
	turn turret to y-axis <0.000000> speed <200.000000>;
	move arm2 to z-axis [0.000000] speed [60.000000];
	move arm3 to z-axis [0.000000] speed [60.000000];
	move arm4 to z-axis [0.000000] speed [60.000000];
	move arm5 to z-axis [0.000000] speed [60.000000];
	move arm6 to z-axis [0.000000] speed [60.000000];
	move arm7 to z-axis [0.000000] speed [60.000000];
	wait-for-turn turret around y-axis;
	wait-for-turn arm1 around x-axis;
	wait-for-move arm2 along z-axis;
	wait-for-move arm3 along z-axis;
	wait-for-move arm4 along z-axis;
	wait-for-move arm5 along z-axis;
	wait-for-move arm6 along z-axis;
	wait-for-move arm7 along z-axis;
	turn arm1 to x-axis <-30.000000> speed <60.000000>;
	
	wait-for-turn arm1 around x-axis;
}

TransportPickup(unitid)
{
	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid) + get UNIT_HEIGHT(unitid));
	if( bInDistance AND get UNKNOWN_UNIT_VALUE(74)(unitid) == get UNKNOWN_UNIT_VALUE(74)(get UNKNOWN_UNIT_VALUE(71)) )
	{
		set BUSY to 1;
		call-script BoomExtend();
		move link to y-axis [0.000000] - get UNIT_HEIGHT(unitid) now;
		attach-unit unitid to link;
		call-script BoomToPad();
		attach-unit unitid to base;
		call-script BoomReset();
		set BUSY to 0;
	}
}

TransportDrop(unitid, position)
{
	call-script BoomCalc(position,get GROUND_HEIGHT(position) + get UNIT_HEIGHT(unitid));
	if( bInDistance )
	{
		set BUSY to 1;
		call-script BoomToPad();
		//move link to y-axis [0.000000] - get UNIT_HEIGHT(unitid) now;
		attach-unit unitid to link;
		call-script BoomExtend();
		drop-unit unitid;
		call-script BoomReset();
		set BUSY to 0;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode ground type BITMAPONLY | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type BITMAPONLY | NOHEATCLOUD;
		explode door2 type BITMAPONLY | NOHEATCLOUD;
		explode door3 type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		//explode arm1 type BITMAPONLY | NOHEATCLOUD;
		//explode arm2 type BITMAPONLY | NOHEATCLOUD;
		//explode arm3 type BITMAPONLY | NOHEATCLOUD;
		//explode arm4 type BITMAPONLY | NOHEATCLOUD;
		//explode arm5 type BITMAPONLY | NOHEATCLOUD;
		//explode arm6 type BITMAPONLY | NOHEATCLOUD;
		//explode arm7 type BITMAPONLY | NOHEATCLOUD;
		//explode magnet type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode link type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door1 type FALL | NOHEATCLOUD;
		explode door2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm1 type FALL | NOHEATCLOUD;
		//explode arm2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm3 type FALL | NOHEATCLOUD;
		//explode arm4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm5 type FALL | NOHEATCLOUD;
		//explode arm6 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm7 type FALL | NOHEATCLOUD;
		//explode magnet type FALL | NOHEATCLOUD;
		//explode link type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode door3 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode arm2 type SMOKE | FALL | NOHEATCLOUD;
		//explode arm3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm4 type SMOKE | FALL | NOHEATCLOUD;
		//explode arm5 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm6 type SMOKE | FALL | NOHEATCLOUD;
		//explode arm7 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode magnet type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode link type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode ground type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode door3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode arm1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode arm2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode arm3 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode arm4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm5 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode arm6 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm7 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode magnet type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode link type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
