#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, beam, nanogun, doorr, doorl, post, wake, turret;

static-var  Static_Var_1, notBuilding, statechg_DesiredState, statechg_StateChanging, Wobble_status;

// Signal definitions
#define SIG_MOVE		2
#define SIG_BUILD		4
#define SIG_IDLE		8

WobbleUnit()
{
	while( TRUE )
	{
		if( Wobble_status)
		{
			if( get GROUND_WATER_HEIGHT(get UNIT_XZ) < 0 ) //Over Water
			{
				move base to y-axis [-0.500000] speed [0.50000];
			}
			else
			{
				move base to y-axis [-0.500000] speed [0.50000];
			}
		}
		else
		{
			if( get GROUND_WATER_HEIGHT(get UNIT_XZ) < 0 ) //Over Water
			{
				move base to y-axis [0.500000] speed [0.50000];
			}
			else
			{
				move base to y-axis [0.000000] speed [0.50000];
			}
		}
		Wobble_status = !Wobble_status;
		sleep 260;
	}
}

BankControl()
{
	var lastHeading, currHeading, diffHeading;
	lastHeading = GET HEADING;
	while (TRUE)
	{
		currHeading = GET HEADING;
		diffHeading = currHeading - lastHeading;
		// Set values for tilt

		//Remove Extreme values
		if ( diffHeading > 1500 ) diffHeading = 1500;
		if ( diffHeading < -1500 ) diffHeading = -1500;
		//get PRINT(diffHeading);
		turn base to z-axis 1.0 * diffHeading speed <23>;
		
		lastHeading = currHeading;
		sleep 67;
	}
}


#define BASEPIECE base
#define HITSPEED <35.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 2
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"


activatescr()
{
	turn doorr to z-axis <0.000000> now;
	turn doorr to z-axis <-67.010989> speed <99.000000>;
	turn doorl to z-axis <0.000000> now;
	turn doorl to z-axis <67.010989> speed <99.000000>;
	sleep 677;

	move doorr to y-axis [-2.000000] speed [2.000000];
	move doorl to y-axis [-2.000000] speed [2.000000];
	sleep 688;

	turn post to x-axis <90.021978> speed <131.000000>;
	turn nanogun to x-axis <-90.021978> speed <131.000000>;
	sleep 687;
}

deactivatescr()
{
	set INBUILDSTANCE to 0;
	turn post to y-axis <0.000000> speed <160.000000>;
	wait-for-turn post around y-axis;

	move doorr to y-axis [-2.000000] now;
	move doorl to y-axis [-2.000000] now;
	turn doorr to z-axis <-67.148352> now;
	turn doorl to z-axis <67.148352> now;
	turn post to x-axis <90.021978> now;
	turn post to x-axis <0.000000> speed <197.000000>;
	turn nanogun to x-axis <-90.021978> now;
	turn nanogun to x-axis <0.000000> speed <197.000000>;
	sleep 457;

	move doorr to y-axis [0.000000] speed [4.000000];
	move doorl to y-axis [0.000000] speed [4.000000];
	sleep 471;

	turn doorr to z-axis <0.000000> speed <143.000000>;
	turn doorl to z-axis <0.000000> speed <143.000000>;
	sleep 469;
}


HoverIdle()
{
	signal SIG_IDLE;
	set-signal-mask SIG_IDLE;
	while( TRUE )
	{
	    emit-sfx 1024 + 2 from wake;
	    sleep 1750;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	signal SIG_IDLE;
	var waketime;
	var bowtime;
	while( TRUE )
	{
		emit-sfx 1024 + 0 from wake;
		if (bowtime) emit-sfx 1024 + 1 from wake;
		bowtime = !bowtime;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 30 ) waketime = 30;
		sleep 15000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	signal SIG_IDLE;
	start-script HoverIdle();
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script deactivatescr();
			notBuilding = 1;
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			notBuilding = 0;
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide wake;
	hide beam;
	notBuilding = 1;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	while( get(BUILD_PERCENT_LEFT))
	{
		sleep 500;
	}
	start-script BankControl();
	start-script WobbleUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(heading, pitch)
{
	start-script RequestState(0);
	while( notBuilding ) sleep 100;
	signal SIG_BUILD;
	turn post to y-axis heading speed <160.000000>;
	wait-for-turn post around y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_BUILD;	
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

/*
TargetHeading(Func_Var_1)
{
	Static_Var_2 = 0 - Func_Var_1;
}
*/

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode doorl type BITMAPONLY | NOHEATCLOUD;
		//explode doorr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode post type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		//explode nanogun type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode beam type BITMAPONLY | NOHEATCLOUD;
		//explode wake type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode doorl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode post type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode nanogun type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode beam type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorr type SMOKE | FALL | NOHEATCLOUD;
		//explode post type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nanogun type SMOKE | FALL | NOHEATCLOUD;
		//explode beam type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorl type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode doorr type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode post type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode nanogun type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode beam type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode wake type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
