#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, lflare, lturret, wheels, mturret, mbarrel, mflare, emit_spark;

static-var  restore_delay, bAiming;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_3			4
#define SIG_MOVE			8
static-var oldheading, tilt, maxspeed;

#define tiltspeed <0.75>
#define maxtilt 20

Steering(heading, steer, currentSpeed)
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while(1)
	{
		heading = get HEADING;
		steer = (heading - oldheading);
		//get PRINT(heading,steer,tilt,oldheading);
		currentSpeed =((get CURRENT_SPEED) * 100 / get MAX_SPEED);
		if ((currentSpeed > 75) AND ((get ABS(steer)) > 150)) { //going fast can increase tilt
			
		//get PRINT(1111,currentSpeed, maxspeed);
			if (steer < 5) tilt = tilt + 1;// tilt left
			else tilt = tilt - 1;
			
		}
		else
		{ // slow will always decrease tilt, as will going flat
		//get PRINT(8888,currentSpeed, maxspeed);
			if (tilt > 1) tilt = tilt - 2;
			if (tilt < -1) tilt = tilt + 2;
		}
		if (tilt > 20) tilt = 20;
		if (tilt < -20) tilt = -20;
		
		turn base to z-axis tilt * tiltspeed now;
		move base to y-axis ((tilt* tilt) * [0.005]) now;
		 
		
		sleep 30;
		oldheading = heading;
	}
}


RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.000000>;
	turn base to z-axis <0> - anglez speed <50.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
	return (0);
}



#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 4
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

Sparks()
{
	while( TRUE )
	{
		while( !bAiming )
		{
			sleep 100;
		}
		emit-sfx 1025 + 0 from emit_spark;
		sleep 200;
	}
}

Create()
{
	hide emit_spark;
	hide lflare;
	hide mflare;
	restore_delay = 3000;
	bAiming = FALSE;
	hide emit_spark;
	maxspeed = get MAX_SPEED;
	oldheading = get HEADING;
	tilt = 0;
	
	start-script Sparks();
	return (0);
}

StartMoving()
{
	spin wheels around x-axis speed <140.000000> accelerate <5.000000>;
	
	start-script Steering();
}

StopMoving()
{
	stop-spin wheels around x-axis decelerate <24.000000>;
	signal SIG_MOVE;
	tilt = 0;
	turn base to z-axis <0> speed <180>;
	move base to z-axis [0] speed [2];
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	turn lturret to y-axis <0.000000> speed <150.000000>;
	turn mturret to y-axis <0.000000> speed <150.000000>;
	turn mbarrel to x-axis <0.000000> speed <150.000000>;
	bAiming = FALSE;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	turn lturret to y-axis heading speed <150.000000>;
	wait-for-turn lturret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn mturret to y-axis heading speed <300.000000>;
	turn mbarrel to x-axis <0.000000> - pitch speed <300.000000>;
	wait-for-turn mturret around y-axis;
	wait-for-turn mbarrel around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024+0 from lflare;
	sleep 100;
	return (0);
}

FireSecondary()
{
	sleep 100;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = emit_spark;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = mbarrel;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = lflare;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = mflare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode mturret type BITMAPONLY | NOHEATCLOUD;
		explode mbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode mflare type BITMAPONLY | NOHEATCLOUD;
		//explode wheels type BITMAPONLY | NOHEATCLOUD;
		//explode lturret type BITMAPONLY | NOHEATCLOUD;
		//explode lflare type BITMAPONLY | NOHEATCLOUD;
		//explode emit_spark type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode mturret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode mbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode mflare type FALL | NOHEATCLOUD;
		explode wheels type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lturret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lflare type FALL | NOHEATCLOUD;
		//explode emit_spark type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode mturret type SMOKE | FALL | NOHEATCLOUD;
		explode mbarrel type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode mflare type SMOKE | FALL | NOHEATCLOUD;
		explode wheels type SMOKE | FALL | NOHEATCLOUD;
		//explode lturret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lflare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode emit_spark type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode mturret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode mbarrel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode mflare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode wheels type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode lturret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lflare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode emit_spark type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
