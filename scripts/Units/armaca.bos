#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"


#define SIG_BUILD		4	
piece  base, fan, doorl,doorr,platform,arm,nano,emit,thrust;

static-var  statechg_DesiredState, statechg_StateChanging;


activatescr()
{
	if( TRUE )
	{

		spin fan around y-axis speed <360> accelerate <10>;
		sleep 998;
	}
	sleep 44;
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
		turn arm to y-axis <0> speed <90>;
		turn nano to x-axis <0> speed <90>;
		move platform to y-axis [0] speed [90];
		sleep 500;
		move doorl to x-axis [0] speed [10];
		move doorr to x-axis [0] speed [10];
		stop-spin fan around y-axis decelerate <20>;
		sleep 998;
	}
	sleep 44;
	return (0);
}

#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

#define IDLEHOVERSCALE 32
#define IDLEHOVERSPEED 60
#define IDLEBASEPIECE base
#include "idlehover.h"




InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	hide emit;
	hide thrust;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script IdleHover();
	return (0);
}

Activate()
{
	show thrust;
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	hide thrust;
	start-script RequestState(1);
	return (0);
}


StartBuilding(heading, pitch)
{
	
	start-script RequestState(0);
	signal SIG_BUILD;
	move doorl to x-axis [-2.8] speed [10];
	move doorr to x-axis [2.8] speed [10];
	sleep 500;
	move platform to y-axis [5] speed [10];
	set INBUILDSTANCE to 1;
}


StopBuilding()
{
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_BUILD;	
	start-script RequestState(1);

	set INBUILDSTANCE to 0;
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = emit;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thrust type BITMAPONLY | NOHEATCLOUD;
		explode platform type BITMAPONLY | NOHEATCLOUD;
		explode arm type BITMAPONLY | NOHEATCLOUD;
		explode nano type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode emit type BITMAPONLY | NOHEATCLOUD;
		explode doorr type BITMAPONLY | NOHEATCLOUD;
		explode doorl type BITMAPONLY | NOHEATCLOUD;
		explode fan type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thrust type BITMAPONLY | NOHEATCLOUD;
		explode platform type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode arm type BITMAPONLY | NOHEATCLOUD;
		explode nano type BITMAPONLY | NOHEATCLOUD;
		explode emit type BITMAPONLY | NOHEATCLOUD;
		explode doorr type BITMAPONLY | NOHEATCLOUD;
		explode doorl type BITMAPONLY | NOHEATCLOUD;
		explode fan type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thrust type BITMAPONLY | NOHEATCLOUD;
		explode platform type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode arm type BITMAPONLY | NOHEATCLOUD;
		explode nano type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode emit type BITMAPONLY | NOHEATCLOUD;
		explode doorr type BITMAPONLY | NOHEATCLOUD;
		explode doorl type BITMAPONLY | NOHEATCLOUD;
		explode fan type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
    explode base type BITMAPONLY | NOHEATCLOUD;
    explode thrust type BITMAPONLY | NOHEATCLOUD;
    explode platform type FIRE | SMOKE | FALL | NOHEATCLOUD;
    explode arm type BITMAPONLY | NOHEATCLOUD;
    explode nano type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
    explode emit type BITMAPONLY | NOHEATCLOUD;
    explode doorr type BITMAPONLY | NOHEATCLOUD;
    explode doorl type BITMAPONLY | NOHEATCLOUD;
    explode fan type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
