#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, main1, mid1, end1, nano1, main2, mid2, end2, nano2, main3, mid3, end3, nano3, main4, mid4, end4, nano4,beam1,beam2,beam3,beam4;
static-var  spray, unitviewer, Static_Var_3, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


activatescr()
{

	

	turn main1 to y-axis <-135> speed <135>;
	turn mid1 to z-axis <100> speed <100>;
	turn end1 to z-axis <110> speed <110>;
	turn nano1 to y-axis <180> speed <180>;
	
	turn main2 to y-axis <135> speed <135>;
	turn mid2 to z-axis <-100> speed <100>;
	turn end2 to z-axis <-110> speed <110>;
	turn nano2 to y-axis <180> speed <180>;
	
	turn main3 to y-axis <-135> speed <135>;
	turn mid3 to z-axis <-100> speed <100>;
	turn end3 to z-axis <-110> speed <110>;
	turn nano3 to y-axis <180> speed <180>;
	
	turn main4 to y-axis <135> speed <135>;
	turn mid4 to z-axis <100> speed <100>;
	turn end4 to z-axis <110> speed <110>;
	turn nano4 to y-axis <180> speed <180>;
	sleep 1000;
	return (0);
}

deactivatescr()
{
	turn main1 to y-axis <0> speed <135>;
	turn mid1 to z-axis <0> speed <100>;
	turn end1 to z-axis <0> speed <110>;
	turn nano1 to y-axis <0> speed <180>;
	
	turn main2 to y-axis <0> speed <135>;
	turn mid2 to z-axis <0> speed <100>;
	turn end2 to z-axis <0> speed <110>;
	turn nano2 to y-axis <0> speed <180>;
	
	turn main3 to y-axis <0> speed <135>;
	turn mid3 to z-axis <0> speed <100>;
	turn end3 to z-axis <0> speed <110>;
	turn nano3 to y-axis <0> speed <180>;
	
	turn main4 to y-axis <0> speed <135>;
	turn mid4 to z-axis <0> speed <100>;
	turn end4 to z-axis <0> speed <110>;
	turn nano4 to y-axis <0> speed <180>;
	sleep 1000;
	return (0);
	return (0);
}

#define BASEPIECE base
#define HITSPEED <15.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 15
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.11> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn base to x-axis rockAng speed rockSpeed*1.5;
			turn base to z-axis rockAng speed rockSpeed*1.5;
			wait-for-turn base around x-axis;
			wait-for-turn base around z-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}


OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	return (0);
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	return (0);
}

Go()
{

	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();

	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	hide beam4;
	hide beam3;
	hide beam2;
	hide beam1;
	hide pad;

	spray = 0;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script RockOnWaves();
}

QueryNanoPiece(piecenum)
{

	piecenum=beam1+spray;
	spray=spray+1;
	if (spray>3) spray=0;
}


Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
  sleep 5000;
	set-signal-mask 0;
	start-script RequestState(1);
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode pad type BITMAPONLY | NOHEATCLOUD;
		explode main1 type BITMAPONLY | NOHEATCLOUD;
		explode mid1 type BITMAPONLY | NOHEATCLOUD;
		explode end1 type BITMAPONLY | NOHEATCLOUD;
		explode nano1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode beam1 type BITMAPONLY | NOHEATCLOUD;
		explode main2 type BITMAPONLY | NOHEATCLOUD;
		explode mid2 type BITMAPONLY | NOHEATCLOUD;
		explode end2 type BITMAPONLY | NOHEATCLOUD;
		explode nano2 type BITMAPONLY | NOHEATCLOUD;
		explode beam2 type BITMAPONLY | NOHEATCLOUD;
		explode main3 type BITMAPONLY | NOHEATCLOUD;
		explode mid3 type BITMAPONLY | NOHEATCLOUD;
		explode end3 type BITMAPONLY | NOHEATCLOUD;
		explode nano3 type BITMAPONLY | NOHEATCLOUD;
		explode beam3 type BITMAPONLY | NOHEATCLOUD;
		explode main4 type BITMAPONLY | NOHEATCLOUD;
		explode mid4 type BITMAPONLY | NOHEATCLOUD;
		explode end4 type BITMAPONLY | NOHEATCLOUD;
		explode nano4 type BITMAPONLY | NOHEATCLOUD;
		explode beam4 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode pad type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode main1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode mid1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode end1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode beam1 type FALL | NOHEATCLOUD;
		explode main2 type FALL | NOHEATCLOUD;
		explode mid2 type FALL | NOHEATCLOUD;
		explode end2 type FALL | NOHEATCLOUD;
		explode nano2 type FALL | NOHEATCLOUD;
		explode beam2 type FALL | NOHEATCLOUD;
		explode main3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode mid3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode end3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode beam3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode main4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode mid4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode end4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode beam4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode pad type SMOKE | FALL | NOHEATCLOUD;
		explode main1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode mid1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode end1 type SMOKE | FALL | NOHEATCLOUD;
		explode nano1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode beam1 type SMOKE | FALL | NOHEATCLOUD;
		explode main2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode mid2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode end2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode beam2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode main3 type SMOKE | FALL | NOHEATCLOUD;
		explode mid3 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode end3 type SMOKE | FALL | NOHEATCLOUD;
		explode nano3 type SMOKE | FALL | NOHEATCLOUD;
		explode beam3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode main4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode mid4 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode end4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode beam4 type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode pad type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode main1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode mid1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode end1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode nano1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode beam1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode main2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode mid2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode end2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode beam2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode main3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode mid3 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode end3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano3 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode beam3 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode main4 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode mid4 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode end4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode beam4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
