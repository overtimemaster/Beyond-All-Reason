#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, fan, d1,d2,d3,d4;

static-var  Static_Var_1, Static_Var_2, Static_Var_3;

activatescr()
{
	set ACTIVATION to 100;
	turn d1 to x-axis <90> speed <30>;
	turn d3 to x-axis <-90> speed <30>;
	turn d1 to y-axis <180> speed <60>;
	turn d3 to y-axis <180> speed <60>;
	
	turn d2 to z-axis <-90> speed <30>;
	turn d4 to z-axis <90> speed <30>;
	turn d2 to y-axis <180> speed <60>;
	turn d4 to y-axis <180> speed <60>;
	spin fan around y-axis speed <15> accelerate <0.1>;
}

deactivatescr()
{

	turn d1 to x-axis <0> speed <30>;
	turn d3 to x-axis <0> speed <30>;
	turn d1 to y-axis <0> speed <60>;
	turn d3 to y-axis <0> speed <60>;
	
	turn d2 to z-axis <0> speed <30>;
	turn d4 to z-axis <0> speed <30>;
	turn d2 to y-axis <0> speed <60>;
	turn d4 to y-axis <0> speed <60>;
	
	stop-spin fan around y-axis decelerate <0.2>;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_3 )
	{
		Static_Var_2 = requestedstate;
		return (0);
	}
	Static_Var_3 = 1;
	currentstate = Static_Var_2;
	Static_Var_2 = requestedstate;
	while( Static_Var_2 != currentstate )
	{
		if( Static_Var_2 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			currentstate = 0;
		}
	}
	Static_Var_3 = 0;
}

Create()
{
	Static_Var_2 = 1;
	Static_Var_3 = 0;
	start-script SmokeUnit();
	Static_Var_1 = 0;
}

Activate()
{
	if( Static_Var_1 )
	{
		set ACTIVATION to 0;
		return (0);
	}
	set ARMORED to 0;
	start-script RequestState(0);
}

Deactivate()
{
	set ARMORED to 1;
	start-script RequestState(1);
}

HitByWeapon(anglex, anglez)
{
	if( get ACTIVATION )
	{
		Static_Var_1 = 1;
	}
	if( Static_Var_1 )
	{
		signal 2;
		set-signal-mask 2;
		set ACTIVATION to 0;
		sleep 8000;
		Static_Var_1 = 0;
		set ACTIVATION to 100;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode d1 type BITMAPONLY | NOHEATCLOUD;
		explode fan type BITMAPONLY | NOHEATCLOUD;
		explode d2 type BITMAPONLY | NOHEATCLOUD;
		explode d3 type BITMAPONLY | NOHEATCLOUD;
		explode d4 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode d1 type FALL | NOHEATCLOUD;
		explode d2 type FALL | NOHEATCLOUD;
		explode d3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode d4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		
		explode fan type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode d1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode d2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode d3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode d4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode fan type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode d1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode d2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode d3 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode d4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode fan type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
