#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flarel,flarer, barrelr,barrell,turret, base, aimfrom;

static-var  restore_delay, gun_2;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4




#define BASEPIECE base
#define HITSPEED <65.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 2
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

Create()
{
	hide aimfrom;
	hide flarel;
	hide flarer;
	gun_2 = flarel;
	restore_delay = 3000;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret to y-axis <0.000000> speed <80.000000>;
	turn barrell to x-axis <0.000000> speed <50.000000>;
	turn barrelr to x-axis <0.000000> speed <50.000000>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <80.000000>;
	turn barrell to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn barrell around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	sleep 150;
	gun_2 = !gun_2;
}

AimFromPrimary(piecenum)
{
	piecenum = barrell;
}

QueryPrimary(piecenum)
{
	piecenum = flarel;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret to y-axis heading speed <80.000000>;
	turn barrelr to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn barrelr around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	sleep 150;
	gun_2 = !gun_2;
}

AimFromSecondary(piecenum)
{
	piecenum = barrelr;
}

QuerySecondary(piecenum)
{
	piecenum = flarer;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode barrell type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flarel type BITMAPONLY | NOHEATCLOUD;
		//explode barrelr type BITMAPONLY | NOHEATCLOUD;
		//explode flarer type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrell type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flarel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flarer type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrell type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode flarel type SMOKE | FALL | NOHEATCLOUD;
		explode barrelr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flarer type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrell type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flarel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelr type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flarer type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
