#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, post, turret, barrel, flare, aimpoint;

static-var  Static_Var_1, restore_delay, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2

Go()
{
	move post to y-axis [4] speed [150.000000];
	move barrel to z-axis [0.000000] speed [90.000000];
	wait-for-move post along y-axis;
	wait-for-move barrel along z-axis;
	Static_Var_1 = 1;
	set ARMORED to 0;
}

Stop()
{
	set ARMORED to 1;
	Static_Var_1 = 0;
	turn turret to x-axis <0.000000> speed <300.000000>;
	turn post to y-axis <0.000000> speed <300.000000>;
	move barrel to z-axis [-8.000000] speed [20.000000];
	wait-for-turn barrel around x-axis;
	wait-for-turn post around y-axis;
	move post to y-axis [-26.000000] speed [90.000000];
	wait-for-move post along y-axis;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	start-script RequestState(1);
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

Create()
{
	hide aimpoint;
	hide flare;

	restore_delay = 2000;
	Static_Var_1 = 0;
	call-script InitState();
	start-script RequestState(0);
	
	move aimpoint to y-axis [5] speed [150.000000];
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn post to y-axis heading speed <300.000000>;
	if (pitch < 0) pitch = 0;
	turn turret to x-axis <0.000000> - pitch speed <300.000000>;
	wait-for-turn post around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024+0 from flare;
	sleep 150;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimFromPrimary(piecenum)
{
	piecenum = aimpoint;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode post type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode post type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type FALL | NOHEATCLOUD;
		explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode post type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type SMOKE | FALL | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type SMOKE | FALL | NOHEATCLOUD;
		explode base type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode post type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
