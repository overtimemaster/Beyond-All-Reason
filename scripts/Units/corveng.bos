#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  missile1, missile2, base, thrust1, thrust2;

static-var  Static_Var_2;



#define BASEPIECE base
#define HITSPEED <105.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

static-var maxSpeed, currentSpeed;
BarrelRoll() // remember to start-script BarrelRoll(); in Create()!
{
	currentSpeed = (get CURRENT_SPEED);
	maxSpeed = (get MAX_SPEED);
	
	while (TRUE){
		sleep 2000;
		currentSpeed = (get CURRENT_SPEED);
		//get PRINT(maxSpeed, currentSpeed);
		if( Rand( 1, 5 ) == 1 AND (maxSpeed < (currentSpeed+100) ) )
		{
			turn base to z-axis <240.054945> speed <120.027473>;
			wait-for-turn base around z-axis;
			turn base to z-axis <120.027473> speed <180.043956>;
			wait-for-turn base around z-axis;
			turn base to z-axis <0.000000> speed <120.027473>;
		}
	}
}

Create()
{
	hide missile1;
	hide missile2;
	hide thrust1;
	hide thrust2;
	start-script BarrelRoll();
}

Activate()
{
	show thrust1;
	show thrust2;
}

Deactivate()
{
	hide thrust1;
	hide thrust2;
}

AimPrimary(heading, pitch)
{
	return (1);
}

AimSecondary(heading, pitch)
{
	return (1);
}

FirePrimary(Func_Var_1)
{
	Static_Var_2 = !Static_Var_2;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = Static_Var_2;
	return (0);
}

FireSecondary(Func_Var_1)
{
	Static_Var_2 = !Static_Var_2;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = Static_Var_2;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thrust1 type BITMAPONLY | NOHEATCLOUD;
		explode thrust2 type BITMAPONLY | NOHEATCLOUD;
		explode missile1 type BITMAPONLY | NOHEATCLOUD;
		explode missile2 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thrust1 type BITMAPONLY | NOHEATCLOUD;
		explode thrust2 type BITMAPONLY | NOHEATCLOUD;
		explode missile1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode missile2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thrust1 type BITMAPONLY | NOHEATCLOUD;
		explode thrust2 type BITMAPONLY | NOHEATCLOUD;
		explode missile1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode missile2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thrust1 type BITMAPONLY | NOHEATCLOUD;
		explode thrust2 type BITMAPONLY | NOHEATCLOUD;
		explode missile1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode missile2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
