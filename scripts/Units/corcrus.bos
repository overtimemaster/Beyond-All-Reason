#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, wake, bow, chrgflare, turret, sleeve, barrel1, barrel2,
       foreturret, foreflare, aftturret, aftflare, flare1,
       flare2 ;

static-var  restore_delay, gun_2, gun_1, bMoving, oldHead;

// Signal definitions
#define SIG_AIM_2			2
#define SIG_AIM				4
#define SIG_MOVE			8

#define BASEPIECE base
#define HITSPEED <20.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 200

#include "unit_hitbyweaponid_and_smoke.h"

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn base to x-axis rockAng speed rockSpeed*4;
			wait-for-turn base around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}


Create()
{
	hide bow;
	hide aftflare;
	hide foreflare;
	hide wake;
	hide flare2;
	hide flare1;
	hide chrgflare;
	hide flare1;
	hide flare2;
	hide foreflare;
	hide aftflare;
	gun_1 = base;
	gun_2 = base;
	bMoving = FALSE;
	restore_delay = 3000;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <45.000000>;
	turn sleeve to x-axis <0.000000> speed <50.000000>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

RestoreDeckLaser()
{
	sleep 3000;
	set-signal-mask 0;
	turn foreturret to y-axis <0.000000> speed <150.000000>;
	turn foreturret to x-axis <0.000000> speed <100.000000>;
	turn aftturret to y-axis <0.000000> speed <150.000000>;
	turn aftturret to x-axis <0.000000> speed <100.000000>;
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-3.0> speed <3.0>;
		move base to y-axis [0.32] speed [0.25];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <3.0>;
		move base to y-axis [0.0] speed [0.25];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	start-script waveSplash();
	var bowtime;
	bowtime = 0;
	while( TRUE )
	{
		emit-sfx 1024 + 0 from wake;
		if (bowtime) emit-sfx 1024 + 1 from bow;
        bowtime = !bowtime;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 12000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.0> speed <3.0>;
	move base to y-axis [0.0] speed [0.25];
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	if( gun_2 )
	{
		turn aftturret to y-axis heading speed <300.000000>;
		turn aftturret to x-axis <0.000000> - pitch speed <200.000000>;
		wait-for-turn aftturret around y-axis;
		wait-for-turn aftturret around x-axis;
	}
	else
	{
		turn foreturret to y-axis heading speed <300.000000>;
		turn foreturret to x-axis <0.000000> - pitch speed <200.000000>;
		wait-for-turn foreturret around y-axis;
		wait-for-turn foreturret around x-axis;
	}
	start-script RestoreDeckLaser();
	return (1);
}

FireSecondary()
{
	if( gun_2 )
	{
		show aftflare;
		sleep 150;
		hide aftflare;
	}
	else
	{
		show foreflare;
		sleep 150;
		hide foreflare;
	}
	gun_2 = !gun_2;
}

AimFromSecondary(piecenum)
{
	if( gun_2 )
	{
		piecenum = aftturret;
	}
	else
	{
		piecenum = foreturret;
	}
}

QuerySecondary(piecenum)
{
	if( gun_2 )
	{
		piecenum = aftflare;
	}
	else
	{
		piecenum = foreflare;
	}
}

AimTertiary(heading, pitch)
{
	return (1);
}

FireTertiary()
{
	sleep 150;
}

AimFromTertiary(piecenum)
{
	piecenum = base;
}

QueryTertiary(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <90.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <100.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 )
	{
		show flare2;
		sleep 150;
		hide flare2;
	}
	else
	{
		show flare1;
		sleep 150;
		hide flare1;
	}
	gun_1 = !gun_1;
}

AimFromPrimary(piecenum)
{
	piecenum = sleeve;
}

QueryPrimary(piecenum)
{
	piecenum = flare1 + gun_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode barrel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare1 type BITMAPONLY | NOHEATCLOUD;
		//explode barrel2 type BITMAPONLY | NOHEATCLOUD;
		//explode flare2 type BITMAPONLY | NOHEATCLOUD;
		explode foreturret type BITMAPONLY | NOHEATCLOUD;
		//explode foreflare type BITMAPONLY | NOHEATCLOUD;
		//explode aftturret type BITMAPONLY | NOHEATCLOUD;
		//explode aftflare type BITMAPONLY | NOHEATCLOUD;
		//explode wake type BITMAPONLY | NOHEATCLOUD;
		//explode chrgflare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		explode sleeve type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode foreturret type FALL | NOHEATCLOUD;
		//explode foreflare type FALL | NOHEATCLOUD;
		//explode aftturret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode aftflare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode chrgflare type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode flare1 type SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare2 type SMOKE | FALL | NOHEATCLOUD;
		explode foreturret type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode foreflare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode aftturret type SMOKE | FALL | NOHEATCLOUD;
		//explode aftflare type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode wake type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode chrgflare type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode foreturret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode foreflare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode aftturret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode aftflare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode chrgflare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
