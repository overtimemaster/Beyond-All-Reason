#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, torp1, torp2, bubbles1, bubbles2, bubbles3 ;

static-var  gun_1;

// Signal definitions
#define SIG_MOVE			2


#define BASEPIECE base
#define HITSPEED <25.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 200
HitByWeapon(anglex, anglez, damage)	// angle[x|z] is always [-500;500], damage is multiplied by 100
{
	var amount;//, speedz, speedx;
	amount = damage / (100 * UNITSIZE);
	if (amount < 3  ) return (0);
	if (amount > MAXTILT) amount = MAXTILT;
	//get PRINT(anglex, anglez, amount, damage);
	//speedz = HITSPEED * get ABS(anglez) / 500; //nevermind this, the random error this produces actually looks better than the accurate version
	turn BASEPIECE to z-axis (anglez * amount) / 100  speed HITSPEED;
	turn BASEPIECE to x-axis <0> - (anglex * amount) /100 speed HITSPEED;
	wait-for-turn BASEPIECE around z-axis;
	wait-for-turn BASEPIECE around x-axis;
	turn BASEPIECE to z-axis <0.000000> speed HITSPEED / 4;
	turn BASEPIECE to x-axis <0.000000> speed HITSPEED / 4;
}
HitByWeaponId(anglex, anglez, weaponid, dmg) //weaponID is always 0,lasers and flamers give angles of 0
{
	start-script HitByWeapon(dmg, anglez,anglex); //I dont know why param order must be switched, and this also runs a frame later :(
	return (100); //return damage percent
}


Create()
{
	hide bubbles2;
	hide torp2;
	hide torp1;
	hide bubbles3;
	hide bubbles1;
	gun_1 = torp1;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 259 from bubbles1;
		emit-sfx 259 from bubbles2;
		emit-sfx 259 from bubbles3;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

AimPrimary(heading, pitch)
{
	return (1);
}

FirePrimary()
{
	if( gun_1 == 1 )
	{
		gun_1 = torp2;
		return (0);
	}
	if( gun_1 == 2 )
	{
		gun_1 = torp1;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = torp1;
	}
	if( gun_1 == 2 )
	{
		piecenum = torp2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode torp1 type BITMAPONLY | NOHEATCLOUD;
		explode torp2 type BITMAPONLY | NOHEATCLOUD;
		explode bubbles1 type BITMAPONLY | NOHEATCLOUD;
		explode bubbles2 type BITMAPONLY | NOHEATCLOUD;
		explode bubbles3 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode torp1 type NOHEATCLOUD;
		explode torp2 type FIRE | SMOKE | NOHEATCLOUD;
		explode bubbles1 type FIRE | SMOKE | NOHEATCLOUD;
		explode bubbles2 type FIRE | SMOKE | NOHEATCLOUD;
		explode bubbles3 type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode torp1 type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		explode torp2 type EXPLODE_ON_HIT | SMOKE | NOHEATCLOUD;
		explode bubbles1 type FIRE | SMOKE | NOHEATCLOUD;
		explode bubbles2 type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		explode bubbles3 type FIRE | SMOKE | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode torp1 type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		explode torp2 type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		explode bubbles1 type EXPLODE_ON_HIT | FIRE | NOHEATCLOUD;
		explode bubbles2 type EXPLODE_ON_HIT | FIRE | NOHEATCLOUD;
		explode bubbles3 type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
	return corpsetype;
}
