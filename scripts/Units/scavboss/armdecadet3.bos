#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare1, flare2, turret1, turret2, turret3, turret4, barrel101, barrel102, barrel103, barrel104,
       housing101, housing102, housing103, housing104, spindle1, neck1, barrel201, barrel202, barrel203, barrel204,
       housing201, housing202, housing203, housing204, spindle2, neck2, ground;

static-var  gun_1, gun_2, restore_delay, oldHead;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			8

#define BASEPIECE base
#define HITSPEED <20.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 2
#define MAXTILT 200
HitByWeapon(anglex, anglez, damage)	// angle[x|z] is always [-500;500], damage is multiplied by 100
{
	var amount;//, speedz, speedx;
	amount = damage / (100 * UNITSIZE);
	if (amount < 3  ) return (0);
	if (amount > MAXTILT) amount = MAXTILT;
	//get PRINT(anglex, anglez, amount, damage);
	//speedz = HITSPEED * get ABS(anglez) / 500; //nevermind this, the random error this produces actually looks better than the accurate version
	turn BASEPIECE to z-axis (anglez * amount) / 100  speed HITSPEED;
	turn BASEPIECE to x-axis <0> - (anglex * amount) /100 speed HITSPEED;
	wait-for-turn BASEPIECE around z-axis;
	wait-for-turn BASEPIECE around x-axis;
	turn BASEPIECE to z-axis <0.000000> speed HITSPEED / 4;
	turn BASEPIECE to x-axis <0.000000> speed HITSPEED / 4;
}
HitByWeaponId(anglex, anglez, weaponid, dmg) //weaponID is always 0,lasers and flamers give angles of 0
{
	start-script HitByWeapon(dmg, anglez,anglex); //I dont know why param order must be switched, and this also runs a frame later :(
	return (100); //return damage percent
}

SetDirection(heading)
{
	var spd;
	spd = (get ABS(oldHead) - get ABS(heading)) / 2;
	turn ground to y-axis heading speed spd;
	turn base to y-axis 0-heading speed spd;
	oldHead = heading;
}

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn ground to x-axis rockAng speed rockSpeed*5;
			wait-for-turn ground around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare2;
	hide flare1;
	hide ground;
	hide flare1;
	dont-cache flare1;
	dont-cache barrel101;
	dont-cache barrel102;
	dont-cache barrel103;
	dont-cache barrel104;
	dont-cache housing101;
	dont-cache housing102;
	dont-cache housing103;
	dont-cache housing104;
	dont-cache spindle1;
	dont-cache neck1;
	dont-cache turret1;
	gun_1 = flare1;
	spin flare1 around z-axis speed <250.060440>;
	hide flare2;
	dont-cache flare2;
	dont-cache barrel201;
	dont-cache barrel202;
	dont-cache barrel203;
	dont-cache barrel204;
	dont-cache housing201;
	dont-cache housing202;
	dont-cache housing203;
	dont-cache housing204;
	dont-cache spindle2;
	dont-cache neck2;
	dont-cache turret2;
	gun_2 = flare2;
	spin flare2 around z-axis speed <250.060440>;
	restore_delay = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret3 to y-axis <0.> speed <60.>;
	turn turret4 to y-axis <0.> speed <60.>;
	turn spindle1 to x-axis <0.> speed <30.>;
	turn spindle2 to x-axis <0.> speed <30.>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-3.0> speed <3.0>;
		move base to y-axis [0.23] speed [0.23];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <3.0>;
		move base to y-axis [0.0] speed [0.23];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 2 from ground;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 9000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.0> speed <3.0>;
	move base to y-axis [0.0] speed [0.23];
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret3 to y-axis heading speed <60.>;
	turn neck1 to x-axis <0.> - pitch speed <30.>;
	wait-for-turn turret3 around y-axis;
	wait-for-turn neck1 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret4 to y-axis heading speed <60.>;
	turn neck2 to x-axis <0.> - pitch speed <30.>;
	wait-for-turn turret4 around y-axis;
	wait-for-turn neck2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from flare1;
	if( gun_1 == 1 )
	{
		move barrel101 to z-axis [-10.000000] now;
		move barrel101 to z-axis [0.000000] speed [10.000000];
		turn spindle1 to z-axis <90.000000> speed <230.000000>;
	}
	if( gun_1 == 2 )
	{
		move barrel102 to z-axis [-10.000000] now;
		move barrel102 to z-axis [0.000000] speed [10.000000];
		turn spindle1 to z-axis <180.000000> speed <230.000000>;
	}
	if( gun_1 == 3 )
	{
		move barrel103 to z-axis [-10.000000] now;
		move barrel103 to z-axis [0.000000] speed [10.000000];
		turn spindle1 to z-axis <270.000000> speed <230.000000>;
	}
	if( gun_1 == 4 )
	{
		move barrel104 to z-axis [-10.000000] now;
		move barrel104 to z-axis [0.000000] speed [10.000000];
		turn spindle1 to z-axis <0.000000> speed <230.000000>;
	}
	++gun_1;
	if( gun_1 == 5 )
	{
		gun_1 = 1;
	}
}

FireSecondary()
{
	emit-sfx 1024 + 0 from flare2;
	if( gun_2 == 1 )
	{
		move barrel201 to z-axis [-10.000000] now;
		move barrel201 to z-axis [0.000000] speed [10.000000];
		turn spindle2 to z-axis <90.000000> speed <230.000000>;
	}
	if( gun_2 == 2 )
	{
		move barrel202 to z-axis [-10.000000] now;
		move barrel202 to z-axis [0.000000] speed [10.000000];
		turn spindle2 to z-axis <180.000000> speed <230.000000>;
	}
	if( gun_2 == 3 )
	{
		move barrel203 to z-axis [-10.000000] now;
		move barrel203 to z-axis [0.000000] speed [10.000000];
		turn spindle2 to z-axis <270.000000> speed <230.000000>;
	}
	if( gun_2 == 4 )
	{
		move barrel204 to z-axis [-10.000000] now;
		move barrel204 to z-axis [0.000000] speed [10.000000];
		turn spindle2 to z-axis <0.000000> speed <230.000000>;
	}
	++gun_2;
	if( gun_2 == 5 )
	{
		gun_2 = 1;
	}
}

TargetCleared(Func_Var_1)
{
	if( Func_Var_1 == 1 )
	{
		signal SIG_AIM;
		stop-spin turret3 around y-axis;
		stop-spin neck1 around x-axis;
		stop-spin turret4 around y-axis;
		stop-spin neck2 around x-axis;
	}
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
}

QuerySecondary(piecenum)
{
	piecenum = flare2;
}

AimFromPrimary(piecenum)
{
	piecenum = spindle1;
}

AimFromSecondary(piecenum)
{
	piecenum = spindle2;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode ground type BITMAPONLY | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret3 type BITMAPONLY | NOHEATCLOUD;
		explode turret4 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode ground type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turret3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
