#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret1, turret2, abarrela, abarrelb, bbarrela, bbarrelb, flare11,
       flare12, flare21, flare22, wake1, flare3;

static-var  gun_1, gun_2, restore_delay;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			8


#define BASEPIECE base
#define HITSPEED <20.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 200
HitByWeapon(anglex, anglez, damage)	// angle[x|z] is always [-500;500], damage is multiplied by 100
{
	var amount;//, speedz, speedx;
	amount = damage / (100 * UNITSIZE);
	if (amount < 3  ) return (0);
	if (amount > MAXTILT) amount = MAXTILT;
	//get PRINT(anglex, anglez, amount, damage);
	//speedz = HITSPEED * get ABS(anglez) / 500; //nevermind this, the random error this produces actually looks better than the accurate version
	turn BASEPIECE to z-axis (anglez * amount) / 100  speed HITSPEED;
	turn BASEPIECE to x-axis <0> - (anglex * amount) /100 speed HITSPEED;
	wait-for-turn BASEPIECE around z-axis;
	wait-for-turn BASEPIECE around x-axis;
	turn BASEPIECE to z-axis <0.000000> speed HITSPEED / 4;
	turn BASEPIECE to x-axis <0.000000> speed HITSPEED / 4;
}
HitByWeaponId(anglex, anglez, weaponid, dmg) //weaponID is always 0,lasers and flamers give angles of 0
{
	start-script HitByWeapon(dmg, anglez,anglex); //I dont know why param order must be switched, and this also runs a frame later :(
	return (100); //return damage percent
}

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn base to x-axis rockAng speed rockSpeed*5;
			turn base to z-axis rockAng speed rockSpeed*5;
			wait-for-turn base around x-axis;
			wait-for-turn base around z-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	hide flare3;
	hide wake1;
	hide flare12;
	hide flare11;
	hide flare22;
	hide flare21;
	hide flare11;
	hide flare12;
	hide flare21;
	hide flare22;
	gun_1 = turret1;
	gun_2 = turret1;
	restore_delay = 3000;
	start-script SmokeUnit();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret1 to y-axis <0.> speed <45.>;
	turn turret2 to y-axis <0.> speed <45.>;
	turn turret1 to x-axis <0.> speed <25.>;
	turn turret2 to x-axis <0.> speed <25.>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <45.>;
	turn turret1 to x-axis <0.> - pitch speed <25.>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn turret1 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		move abarrela to z-axis [-1.] speed [500.];
		wait-for-move abarrela along z-axis;
		move abarrela to z-axis [0.] speed [5.];
		show flare11;
		sleep 150;
		hide flare11;
	}
	if( gun_1 == 1 )
	{
		move abarrelb to z-axis [-1.] speed [500.];
		wait-for-move abarrelb along z-axis;
		move abarrelb to z-axis [0.] speed [5.];
		show flare12;
		sleep 150;
		hide flare12;
	}
	++gun_1;
	if( gun_1 == 2 )
	{
		gun_1 = base;
	}
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
	return (0);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <45.>;
	turn turret2 to x-axis <0.> - pitch speed <25.>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn turret2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	if( gun_2 == 0 )
	{
		move bbarrela to z-axis [-1.] speed [500.];
		wait-for-move bbarrela along z-axis;
		move bbarrela to z-axis [0.] speed [5.];
		show flare21;
		sleep 150;
		hide flare21;
	}
	if( gun_2 == 1 )
	{
		move bbarrelb to z-axis [-1.] speed [500.];
		wait-for-move bbarrelb along z-axis;
		move bbarrelb to z-axis [0.] speed [5.];
		show flare22;
		sleep 150;
		hide flare22;
	}
	++gun_2;
	if( gun_2 == 2 )
	{
		gun_2 = base;
	}
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare11;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare12;
	}
	return (0);
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = flare21;
	}
	if( gun_2 == 1 )
	{
		piecenum = flare22;
	}
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret2 type BITMAPONLY | NOHEATCLOUD;
		explode bbarrela type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare21 type BITMAPONLY | NOHEATCLOUD;
		explode bbarrelb type BITMAPONLY | NOHEATCLOUD;
		//explode flare22 type BITMAPONLY | NOHEATCLOUD;
		//explode turret1 type BITMAPONLY | NOHEATCLOUD;
		//explode abarrela type BITMAPONLY | NOHEATCLOUD;
		//explode flare11 type BITMAPONLY | NOHEATCLOUD;
		//explode abarrelb type BITMAPONLY | NOHEATCLOUD;
		//explode flare12 type BITMAPONLY | NOHEATCLOUD;
		//explode flare3 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bbarrela type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare21 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bbarrelb type FALL | NOHEATCLOUD;
		//explode flare22 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode turret1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode abarrela type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare11 type FALL | NOHEATCLOUD;
		//explode abarrelb type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare12 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret2 type SMOKE | FALL | NOHEATCLOUD;
		explode bbarrela type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare21 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bbarrelb type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare22 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode turret1 type SMOKE | FALL | NOHEATCLOUD;
		//explode abarrela type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare11 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode abarrelb type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare12 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode wake1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare3 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode bbarrela type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare21 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bbarrelb type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare22 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode turret1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode abarrela type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare11 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode abarrelb type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare12 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode wake1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare3 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
