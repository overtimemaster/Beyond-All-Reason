#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, ground, wake1, wake2, turret1, sleeve1, barrel11, flare11, flare12, barrel12, turret2, sleeve2, barrel21, flare21, flare22, barrel22;
		
static-var  gun_1, gun_2, restore_delay, Static_Var_7, Static_Var_8, aimDir, oldHead;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			4096



#define BASEPIECE base
#define HITSPEED <25.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 200
HitByWeapon(anglex, anglez, damage)	// angle[x|z] is always [-500;500], damage is multiplied by 100
{
	var amount;//, speedz, speedx;
	amount = damage / (100 * UNITSIZE);
	if (amount < 3  ) return (0);
	if (amount > MAXTILT) amount = MAXTILT;
	//get PRINT(anglex, anglez, amount, damage);
	//speedz = HITSPEED * get ABS(anglez) / 500; //nevermind this, the random error this produces actually looks better than the accurate version
	turn BASEPIECE to z-axis (anglez * amount) / 100  speed HITSPEED;
	turn BASEPIECE to x-axis <0> - (anglex * amount) /100 speed HITSPEED;
	wait-for-turn BASEPIECE around z-axis;
	wait-for-turn BASEPIECE around x-axis;
	turn BASEPIECE to z-axis <0.000000> speed HITSPEED / 4;
	turn BASEPIECE to x-axis <0.000000> speed HITSPEED / 4;
}
HitByWeaponId(anglex, anglez, weaponid, dmg) //weaponID is always 0,lasers and flamers give angles of 0
{
	start-script HitByWeapon(dmg, anglez,anglex); //I dont know why param order must be switched, and this also runs a frame later :(
	return (100); //return damage percent
}

SetDirection(heading)
{
	var spd;
	spd = (get ABS(oldHead) - get ABS(heading)) / 2;
	turn ground to y-axis heading speed spd;
	turn base to y-axis 0-heading speed spd;
	oldHead = heading;
}

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn ground to x-axis rockAng speed rockSpeed*4;
			wait-for-turn ground around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}

ProjXPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -21840 )
	{
		Static_Var_7 = Func_Var_1 * ( Func_Var_2 + 32760 ) / 10920;
	}
	else if( Func_Var_2 > 21840 )
	{
		Static_Var_7 = Func_Var_1 * ( 32760 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -10920 )
	{
		Static_Var_7 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 10920 )
	{
		Static_Var_7 = Func_Var_1;
	}
	else
	{
		Static_Var_7 = Func_Var_1 * Func_Var_2 / 10920;
	}
}

RockZ(Func_Var_1, Func_Var_2)
{
	signal 4096;
	set-signal-mask 4096;
	call-script ProjXPW(10920 / Func_Var_2,Func_Var_1);
	Static_Var_8 = Static_Var_8 + Static_Var_7;
	Static_Var_7 = get ABS(Static_Var_8);
	while( Static_Var_7 > 91 )
	{
		turn base to z-axis Static_Var_8 speed Static_Var_7 * <0.0125>;
		wait-for-turn base around z-axis;
		Static_Var_8 = Static_Var_8 * -1 / 2;
		Static_Var_7 = get ABS(Static_Var_8);
	}
	turn base to z-axis <0.000000> speed <1.5>;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide wake2;
	hide wake1;
	hide flare22;
	hide flare21;
	hide sleeve2;
	hide flare12;
	hide flare11;
	hide sleeve1;
	hide ground;
	hide flare11;
	hide flare12;
	hide flare21;
	hide flare22;
	gun_1 = 0;
	gun_2 = 0;
	restore_delay = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	turn turret1 to y-axis <0.000000> speed <120.000000>;
	turn sleeve1 to x-axis <0.000000> speed <60.000000>;

	turn turret2 to y-axis <0.000000> speed <120.000000>;
	turn sleeve2 to x-axis <0.000000> speed <60.000000>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-3.0> speed <3.0>;
		move base to y-axis [0.32] speed [0.25];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <3.0>;
		move base to y-axis [0.0] speed [0.25];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 12000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.0> speed <3.0>;
	move base to y-axis [0.0] speed [0.25];
}

AimFromWeapon1(piecenum)
{
	piecenum = turret1;
}

QueryWeapon1(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare11;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare12;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare11;
	}
	if( gun_1 == 3 )
	{
		piecenum = flare12;
	}
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <120.000000>;
	turn sleeve1 to x-axis <0.000000> - pitch speed <60.000000>;
	spin barrel11 around z-axis speed <1000>;
	spin barrel12 around z-axis speed <1000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	aimDir = heading;
	stop-spin barrel11 around z-axis decelerate <10>;
	stop-spin barrel12 around z-axis decelerate <10>;
	start-script RestoreAfterDelay();
	return (1);
}

Shot1()
{
	if( gun_1 == 0 )
	{
		move barrel11 to z-axis [-1.5] speed [1000];
		sleep 100;
		move barrel11 to z-axis [0] speed [6];
		gun_1 = 1;
		return (1);
	}
	if ( gun_1 == 1 )
	{
		move barrel12 to z-axis [-1.5] speed [1000];
		sleep 100;
		move barrel12 to z-axis [0] speed [6];
		gun_1 = 2;
		return (1);
	}
	if( gun_1 == 2 )
	{
		move barrel11 to z-axis [-1.5] speed [1000];
		show flare11;
		sleep 100;
		hide flare11;
		move barrel11 to z-axis [0] speed [6];
		gun_1 = 3;
		return (1);
	}
	if ( gun_1 == 3 )
	{
		move barrel12 to z-axis [-1.5] speed [1000];
		show flare12;
		sleep 100;
		hide flare12;
		move barrel12 to z-axis [0] speed [6];
		gun_1 = 0;
		return (1);
	}
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <120.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <60.000000>;
	spin barrel21 around z-axis speed <1000>;
	spin barrel22 around z-axis speed <1000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeve2 around x-axis;
	aimDir = heading;
	stop-spin barrel21 around z-axis decelerate <10>;
	stop-spin barrel22 around z-axis decelerate <10>;
	start-script RestoreAfterDelay();
	return (1);
}

Shot2()
{
	if( gun_2 == 0 )
	{
		move barrel21 to z-axis [-1.5] speed [1000];
		sleep 100;
		move barrel21 to z-axis [0] speed [6];
		gun_2 = 1;
		return (1);
	}
	if ( gun_2 == 1 )
	{
		move barrel22 to z-axis [-1.5] speed [1000];
		sleep 100;
		move barrel22 to z-axis [0] speed [6];
		gun_2 = 2;
		return (1);
	}
		if( gun_2 == 2 )
	{
		move barrel21 to z-axis [-1.5] speed [1000];
		show flare21;
		sleep 100;
		hide flare21;
		move barrel21 to z-axis [0] speed [6];
		gun_2 = 3;
		return (1);
	}
	if ( gun_2 == 3 )
	{
		move barrel22 to z-axis [-1.5] speed [1000];
		show flare22;
		sleep 100;
		hide flare22;
		move barrel22 to z-axis [0] speed [6];
		gun_2 = 0;
		return (1);
	}
}

AimFromWeapon2(piecenum)
{
	piecenum = turret2;
}

QueryWeapon2(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = flare21;
	}
	if( gun_2 == 1 )
	{
		piecenum = flare22;
	}
	if( gun_2 == 2 )
	{
		piecenum = flare21;
	}
	if( gun_2 == 3 )
	{
		piecenum = flare22;
	}
}

AimWeapon3(heading, pitch)
{
	return (1);
}

AimFromWeapon3(piecenum)
{
	piecenum = base;
}

QueryWeapon3(piecenum)
{
	piecenum = base;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel11 type BITMAPONLY | BITMAP1 | NOHEATCLOUD;
		//explode barrel12 type BITMAPONLY | BITMAP1 | NOHEATCLOUD;
		//explode base type BITMAPONLY | BITMAP3 | NOHEATCLOUD;
		explode turret1 type BITMAPONLY | BITMAP1 | NOHEATCLOUD;
		//explode turret2 type BITMAPONLY | BITMAP2 | NOHEATCLOUD;
		//explode wake1 type BITMAPONLY | BITMAP2 | NOHEATCLOUD;
		explode wake2 type BITMAPONLY | BITMAP3 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel11 type FALL | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode barrel12 type FALL | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		//explode base type BITMAPONLY | BITMAP3 | NOHEATCLOUD;
		//explode wake1 type FALL | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		explode wake2 type FALL | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode barrel11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode barrel12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	//explode base type BITMAPONLY | BITMAP3 | NOHEATCLOUD;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	return corpsetype;
}
