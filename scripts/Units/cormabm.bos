#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, dbl, dbr, dtr, dtl, dummy, turret;

static-var  Static_Var_1, Static_Var_2, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 8
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"


Go()
{
	Static_Var_1 = 1;
	return (0);
}

Stop()
{
	Static_Var_1 = 0;
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	hide dummy;
	Static_Var_1 = 0;
	Static_Var_2 = 10000;
	call-script InitState();
	return (0);
}

StartMoving()
{
	start-script RequestState(0);
	return (0);
}

StopMoving()
{
	start-script RequestState(1);
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	move dbl to x-axis [0] speed [8];
	move dbl to z-axis [0] speed [8];
	move dbr to x-axis [0] speed [8];
	move dbr to z-axis [0] speed [8];
	move dtl to x-axis [0] speed [8];
	move dtl to z-axis [0] speed [8];
	move dtr to x-axis [0] speed [8];
	move dtr to z-axis [0] speed [8];
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep Static_Var_2;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	move dbl to x-axis [-3] speed [8];
	move dbl to z-axis [-3] speed [8];
	move dbr to x-axis [3] speed [8];
	move dbr to z-axis [-3] speed [8];
	move dtl to x-axis [-8] speed [8];  
	move dtl to z-axis [3] speed [8];
	move dtr to x-axis [3] speed [8];
	move dtr to z-axis [3] speed [8];
	wait-for-move dtr along x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	sleep 100;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = dummy;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode dbl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		//explode dummy type BITMAPONLY | NOHEATCLOUD;
		//explode dbr type BITMAPONLY | NOHEATCLOUD;
		//explode dtl type BITMAPONLY | NOHEATCLOUD;
		//explode dtr type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode dbl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode dummy type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode dbr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode dtl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode dtr type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode dbl type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode dummy type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode dbr type SMOKE | FALL | NOHEATCLOUD;
		//explode dtl type SMOKE | FALL | NOHEATCLOUD;
		//explode dtr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode dbl type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode dummy type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode dbr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode dtl type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode dtr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
