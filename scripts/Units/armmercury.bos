#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flarel, flarer, base, turret, gunl,gunr;
       
static-var gun_1, last_fire, firstaim;

// Signal definitions
#define SIG_AIM				2
#define DELAY_UNIT_VAR 1024

//lua_TargetCheck() { return 0; }

Create()
{
	hide flarer;
	hide flarel;

	gun_1 = 1;
	firstaim = 1;
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
    turn gunl to x-axis <-11> speed <25.00000>;
    turn gunr to x-axis <-11> speed <25.00000>;
    spin turret around y-axis speed <20.0>;
    firstaim = 1;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep 5000;
	start-script ExecuteRestoreAfterDelay();
}


AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
//	call-script lua_TargetCheck();
//	if ((get DELAY_UNIT_VAR) == 0) {
//	  return(0);
//	}
	turn turret to y-axis heading speed <125.000000>;
	turn gunr to x-axis <0.000000> - pitch speed <100.000000>;
	turn gunl to x-axis <0.000000> - pitch speed <100.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn gunl around x-axis;
	wait-for-turn gunr around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 1 )
	{
		gun_1 = 2;
		return (0);
	}
	if( gun_1 == 2 )
	{
		gun_1 = 1;
		return (0);
	}
	set DELAY_UNIT_VAR to 0;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = flarel;
	}
	if( gun_1 == 2 )
	{
		piecenum = flarer;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode gunl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flarel type BITMAPONLY | NOHEATCLOUD;
		explode gunr type BITMAPONLY | NOHEATCLOUD;
		explode flarer type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode gunl type FALL | NOHEATCLOUD;
		explode flarel type FALL | NOHEATCLOUD;
		explode gunr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flarer type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode gunl type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode flarel type SMOKE | FALL | NOHEATCLOUD;
		explode gunr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flarer type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode gunl type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flarel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode gunr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flarer type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
