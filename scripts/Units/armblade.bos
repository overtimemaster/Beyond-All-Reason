#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, thrust, wingl, wingr, turretl, turretr, flarer, flarel, fan;

static-var  gun_1, Static_Var_2, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_MOVE			2


activatescr()
{
	turn wingl to y-axis <-90> speed <90>;
	turn wingr to y-axis <90> speed <90>;
	spin fan around y-axis speed <250> accelerate <10>;
	sleep 1000;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	turn wingl to y-axis <0> speed <90>;
	turn wingr to y-axis <0> speed <90>;
	stop-spin fan around y-axis decelerate <2>;
	sleep 1000;
}

#define BASEPIECE base
#define HITSPEED <100.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

#define IDLEHOVERSCALE 32
#define IDLEHOVERSPEED 60
#define IDLEBASEPIECE base
#include "idlehover.h"

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	sleep 15;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide flarel;
	hide flarer;
	hide thrust;
	gun_1 = base;
	Static_Var_2 = 3000;
	call-script InitState();
	start-script StopMoving();	
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script IdleHover();
}

Activate()
{
	show thrust;
	start-script RequestState(0);
}

Deactivate()
{
	hide thrust;
	start-script RequestState(1);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}


QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flarel;
	}
	if( gun_1 == 1 )
	{
		piecenum = flarer;
	}
}

AimPrimary(heading, pitch)
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		sleep 150;
	}
	if( gun_1 == 1 )
	{
		sleep 150;
	}
	gun_1 = !gun_1;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thrust type BITMAPONLY | NOHEATCLOUD;
		explode wingr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode fan type BITMAPONLY | NOHEATCLOUD;
		explode turretr type BITMAPONLY | NOHEATCLOUD;
		explode flarer type BITMAPONLY | NOHEATCLOUD;
		explode turretl type BITMAPONLY | NOHEATCLOUD;
		explode flarel type BITMAPONLY | NOHEATCLOUD;
		explode wingl type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thrust type BITMAPONLY | NOHEATCLOUD;
		explode wingr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode fan type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretr type BITMAPONLY | NOHEATCLOUD;
		explode flarer type BITMAPONLY | NOHEATCLOUD;
		explode turretl type BITMAPONLY | NOHEATCLOUD;
		explode flarel type BITMAPONLY | NOHEATCLOUD;
		explode wingl type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thrust type BITMAPONLY | NOHEATCLOUD;
		explode wingr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode fan type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretr type BITMAPONLY | NOHEATCLOUD;
		explode flarer type BITMAPONLY | NOHEATCLOUD;
		explode turretl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flarel type BITMAPONLY | NOHEATCLOUD;
		explode wingl type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
    explode base type BITMAPONLY | NOHEATCLOUD;
    explode thrust type BITMAPONLY | NOHEATCLOUD;
    explode wingr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
    explode fan type FIRE | SMOKE | FALL | NOHEATCLOUD;
    explode turretr type BITMAPONLY | NOHEATCLOUD;
    explode flarer type BITMAPONLY | NOHEATCLOUD;
    explode turretl type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
    explode flarel type BITMAPONLY | NOHEATCLOUD;
    explode wingl type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
