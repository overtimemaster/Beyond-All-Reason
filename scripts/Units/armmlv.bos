#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  	base, tracks, turret, shoulder, leg, lankle, rankle, lwheel, rwheel, 
 		nanosleeve, lnano, rnano, lflare, rflare; 


static-var  Static_Var_1, gun_2, statechg_DesiredState, statechg_StateChanging,
			oldHeading;

#define SIG_MOVE	2
#define SIG_BUILD	4

Steering(heading, steer, currentSpeed)
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while(1)
	{
		heading = get HEADING;
		steer = (heading - oldheading)*3;  //3
		turn rankle to y-axis steer speed <75>;	
		turn lankle to y-axis steer speed <75>;
		steer = (heading - oldheading)*1.5; 
		turn turret to y-axis steer speed <30>;	
		currentSpeed = <3.92> *((get CURRENT_SPEED) * 100 / get MAX_SPEED);
		if (currentSpeed < <100>) currentSpeed = <100>;
		spin rwheel around x-axis speed currentSpeed;
		spin lwheel around x-axis speed currentSpeed;
		sleep 66;
		oldheading = heading;
	}
}


#define BASEPIECE base
#define HITSPEED <75.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

Create()
{
	hide rflare;
	hide lflare;
	Static_Var_1 = 0;
	gun_2 = nanosleeve;
	oldheading = get HEADING;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

DetonateMines()
{
	while( TRUE )
	{
		sleep 500;
		emit-sfx 4096 from base;
	}
}

/*
Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}
*/

StartBuilding(heading, pitch)
{
	signal SIG_BUILD;
	turn lwheel to y-axis <90> speed <120.000000>;
	turn rwheel to y-axis <90> speed <120.000000>;
	spin lwheel around x-axis speed <120>;  //how to turn wheels in right direction?
	spin rwheel around x-axis speed <120>;  //how to turn wheels in right direction?
	turn turret to y-axis heading speed <60.000000>;
	turn lnano to y-axis heading speed <160>;  //nanos pointing in wrong direction in the end => probably sth to do with aiming in combination with turret
	turn rnano to y-axis heading speed <160>;
	wait-for-turn turret around y-axis;
	wait-for-turn lnano around y-axis;
	wait-for-turn rnano around y-axis;
	stop-spin lwheel around x-axis;
	stop-spin rwheel around x-axis;	
	turn lwheel to y-axis <0> speed <120.000000>;
	turn rwheel to y-axis <0> speed <120.000000>;
	
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_BUILD;	
	set INBUILDSTANCE to 0;
	turn lwheel to y-axis <90> speed <120.000000>;
	turn rwheel to y-axis <90> speed <120.000000>;
	spin lwheel around x-axis speed <120>; 
	spin rwheel around x-axis speed <120>;
	turn lnano to y-axis <0.000000> speed <160.000000>;
	turn rnano to y-axis <0.000000> speed <160.000000>;
	turn turret to y-axis <0.000000> speed <60.000000>;
	wait-for-turn lnano around y-axis;  //how to turn wheels in right direction?
	wait-for-turn lnano around y-axis;  //how to turn wheels in right direction?
	wait-for-turn turret around y-axis;
	stop-spin lwheel around x-axis;
	stop-spin rwheel around x-axis;
	turn lwheel to y-axis <0> speed <120.000000>;
	turn rwheel to y-axis <0> speed <120.000000>;
}

StartMoving()
{
	start-script Steering();
}

StopMoving()
{
	signal SIG_MOVE;
	stop-spin rwheel around x-axis;
	stop-spin lwheel around x-axis;
}

QueryNanoPiece(piecenum)
{
	piecenum = nanosleeve;
}

/*
TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}
*/

SweetSpot(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	while( !gun_2 )
	{
		sleep 250;
	}
	return (1);
}

FirePrimary()
{
	gun_2 = base;
	sleep 3000;
	gun_2 = nanosleeve;
}

QueryPrimary(piecenum)
{
	piecenum = turret;
	piecenum = lnano;
	piecenum = rnano;
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

AimSecondary(heading, pitch)
{
	while( !gun_2 )
	{
		sleep 250;
	}
	return (1);
}

FireSecondary()
{
	gun_2 = base;
	sleep 3000;
	gun_2 = nanosleeve;
}

QuerySecondary(piecenum)
{
	piecenum = base;
}

AimFromSecondary(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nanosleeve type BITMAPONLY | NOHEATCLOUD;
		explode shoulder type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nanosleeve type FALL | NOHEATCLOUD;
		explode shoulder type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode nanosleeve type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode shoulder type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode nanosleeve type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode shoulder type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode rwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lwheel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode leg type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
