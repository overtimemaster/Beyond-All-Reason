#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, base2, base3, flarer1, flarer2, body1, turretg, boreg, barrelg, flareg, neck,
 turretb, boreb, barrelb, flareb, turretr, borer, barrelr, aimpoint;

static-var  closed, gun_3, restore_delay, Static_Var_3, Static_Var_7, Static_Var_8,
				aimdir, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8


//-------------------------------CONSTANT ACCELERATION TURRET TURNING---------------------------
// MaxVelocity and acceleration are in degrees per frame (not second!)
// Jerk is the minimum velocity of the turret
// A high precision requirement can result in overshoots if desired 
// (c) CC BY NC ND Beherith mysterme@gmail.com
#define MAX_AIMY1_VELOCITY <3.00>
#define AIMY1_ACCELERATION <0.16>
#define AIMY1_JERK <0.5>
#define AIMY1_PRECISION <1.2>
#define AIMY1_RESTORE_SPEED <1.0>

static-var timetozero, deceleratethreshold;
static-var Stunned;

static-var aimy1delta, aimy1velocity, aimy1target, aimy1position, gameFrame1;

#define MAX_AIMY2_VELOCITY <6.00>
#define AIMY2_ACCELERATION <0.4>
#define AIMY2_JERK <1.2>
#define AIMY2_PRECISION <1.2>
#define AIMY2_RESTORE_SPEED <1.0>
static-var aimy2delta, aimy2velocity, aimy2target, aimy2position, gameFrame2;

#define BASEPIECE base
#define HITSPEED <25.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 7
#define MAXTILT 200

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while(( get ABS( rockAng ) )< <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn base to x-axis rockAng speed rockSpeed*5;
			turn base to z-axis rockAng speed rockSpeed*5;
			wait-for-turn base around x-axis;
			wait-for-turn base around z-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}

ProjXPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -21840 )
	{
		Static_Var_7 = Func_Var_1 * ( Func_Var_2 + 32760 ) / 10920;
	}
	else if( Func_Var_2 > 21840 )
	{
		Static_Var_7 = Func_Var_1 * ( 32760 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -10920 )
	{
		Static_Var_7 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 10920 )
	{
		Static_Var_7 = Func_Var_1;
	}
	else
	{
		Static_Var_7 = Func_Var_1 * Func_Var_2 / 10920;
	}
}

RockZ(Func_Var_1, Func_Var_2)
{
	signal 4096;
	set-signal-mask 4096;
	call-script ProjXPW(10920 / Func_Var_2,Func_Var_1);
	Static_Var_8 = Static_Var_8 + Static_Var_7;
	Static_Var_7 = get ABS(Static_Var_8);
	while( Static_Var_7 > 91 )
	{
		turn base to z-axis Static_Var_8 speed Static_Var_7 * <0.0125>;
		wait-for-turn base around z-axis;
		Static_Var_8 = Static_Var_8 * -1 / 2;
		Static_Var_7 = get ABS(Static_Var_8);
	}
	turn base to z-axis <0.000000> speed <1.5>;
}

activatescr()
{
	if( TRUE )
	{
		move body1 to y-axis [0] speed [90];
		move turretb to y-axis [-14] speed [90];
		wait-for-move turretb along y-axis;
		wait-for-move body1 along y-axis;
	}
	if( TRUE )
	{
		move turretb to y-axis [0] speed [90];
		wait-for-move turretb along y-axis;
	}
	if( TRUE )
	{
		move borer to z-axis [0] speed [30];
		move barrelr to z-axis [0] speed [20];
		turn turretg to x-axis <0> speed <180>;
		move boreg to z-axis [0] speed [24];
		move barrelg to z-axis [0] speed [10];
		move boreb to z-axis [0] speed [12];
		move barrelb to z-axis [0] speed [18];
		wait-for-turn turretb around x-axis;
		wait-for-move borer along y-axis;
		wait-for-turn turretg around x-axis;
	}
	sleep 22;
	closed = FALSE;
}

deactivatescr()
{
	closed = TRUE;
	if( TRUE )
	{
		turn turretb to x-axis <0> speed <180>;
		turn turretg to x-axis <0> speed <180>;
		turn turretr to y-axis <0> speed <180>;	
		turn body1 to y-axis <0> speed <180>;	
		aimy1position = 0;
		turn turretb to y-axis <0> speed <180>;	
		aimy2position = 0;
		move turretb to y-axis [-14] speed [90];
		wait-for-turn turretb around x-axis;
		wait-for-turn turretg around x-axis;
		wait-for-turn turretr around x-axis;
		wait-for-move turretb along y-axis;
	}
	if( TRUE )
	{
		move boreb to z-axis [-6] speed [12];
		move barrelb to z-axis [-9] speed [18];
		turn turretg to x-axis <180> speed <180>;
		move boreg to z-axis [-12] speed [24];
		move barrelg to z-axis [-4] speed [10];
		move borer to z-axis [-15] speed [30];
		move barrelr to z-axis [-10] speed [20];
		wait-for-move borer along y-axis;
		wait-for-turn turretg around x-axis;
	}
	if( TRUE )
	{
		move turretb to y-axis [-28] speed [90];
		move body1 to y-axis [-14] speed [90];
		wait-for-move turretb along y-axis;
		wait-for-move body1 along y-axis;
	}

	wait-for-turn body1 around x-axis;
	wait-for-turn turretb around x-axis;
	sleep 22;
}

Go()
{

	set ARMORED to 0;
	if( !Static_Var_3 )
	{
		call-script activatescr();
	}
	Static_Var_3 = 1;
}

Stop()
{
	Static_Var_3 = 0;
	call-script deactivatescr();
	set ARMORED to 1;

}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide flareb;
	hide flareg;
	hide aimpoint;
	hide flarer2;
	hide flarer1;
    hide flarer1;
    hide flarer2;
    hide flareb;
    hide flareg;
	gun_3 = 0;
	closed = FALSE;
	call-script InitState();
	Static_Var_3 = 0;
	restore_delay = 2000;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
	start-script RequestState(0);
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"


Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_AIM;
	signal SIG_AIM_2;
	signal SIG_AIM_3;
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 4;
}

AimWeapon1(heading, pitch)
{
	if (closed == TRUE)
	{
		return (0);
	}	
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	//We can do this any time
	turn turretb to x-axis <0.000000> - pitch speed <85.000000>;
	aimDir = heading;
	aimy1target = heading;
	aimy1delta = aimy1target - aimy1position;

	
	while( ( get ABS(aimy1delta) > AIMY1_PRECISION ) OR (get ABS(aimy1velocity) > AIMY1_JERK)){
		if (gameFrame1 != get(GAME_FRAME)){ //this is to make sure we dont get double-called, as previous aimweapon thread runs before new aimweaponthread can signal-kill previous one 
			gameFrame1 = get(GAME_FRAME);
	
			//Clamp aimy1position and aimy1delta between <-180>;<180>
			while (aimy1position >  <180>) aimy1position = aimy1position - <360>;
			while (aimy1position < <-180>) aimy1position = aimy1position + <360>;
			while (aimy1delta >  <180>) aimy1delta = aimy1delta - <360>;
			while (aimy1delta < <-180>) aimy1delta = aimy1delta + <360>;
		
			//number of frames required to decelerate to 0
			timetozero = get ABS(aimy1velocity) / AIMY1_ACCELERATION;
			
			//distance from target where we should start decelerating, always 'positive'
			//pos = t * v - (t*(t-1)*a/2)
			deceleratethreshold = timetozero * (get ABS(aimy1velocity)) - (timetozero * (timetozero - 1) * AIMY1_ACCELERATION / 2); 
			
			//get PRINT ( aimy1delta , deceleratethreshold, aimy1velocity, timetozero );
			
			if (get ABS(aimy1delta) <= deceleratethreshold){ //we need to decelerate
				if (aimy1velocity > 0) aimy1velocity = aimy1velocity - AIMY1_ACCELERATION;
				else 				   aimy1velocity = aimy1velocity + AIMY1_ACCELERATION;
			}	
			else //we need to accelerate
			{
				if (aimy1delta > 0) aimy1velocity = get MIN(       MAX_AIMY1_VELOCITY, aimy1velocity + AIMY1_ACCELERATION); 
				else                aimy1velocity = get MAX((-1) * MAX_AIMY1_VELOCITY, aimy1velocity - AIMY1_ACCELERATION);
			}
			
			//Apply jerk at very low velocities
			if (get ABS(aimy1velocity) < AIMY1_JERK){
				if ((aimy1delta >        AIMY1_JERK)) aimy1velocity =        AIMY1_JERK;
				if ((aimy1delta < (-1) * AIMY1_JERK)) aimy1velocity = (-1) * AIMY1_JERK;
			}
			
			aimy1position = aimy1position + aimy1velocity; 
			turn turretb to y-axis aimy1position now;
			aimy1delta = aimy1target - aimy1position ; 	
		}
		sleep 30;		
	}
	aimy1velocity = 0;
	return (1);
}


AimWeapon2(heading, pitch)
{
	if (closed == TRUE)
	{
		return (0);
	}	
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	//We can do this any time
	turn turretg to x-axis <0.000000> - pitch speed <85.000000>;
	
	aimy2target = heading;
	aimy2delta = aimy2target - aimy2position;

	
	while( ( get ABS(aimy2delta) > AIMY2_PRECISION ) OR (get ABS(aimy2velocity) > AIMY2_JERK)){
		if (gameFrame2 != get(GAME_FRAME)){ //this is to make sure we dont get double-called, as previous aimweapon thread runs before new aimweaponthread can signal-kill previous one 
			gameFrame2 = get(GAME_FRAME);
	
			//Clamp aimy2position and aimy2delta between <-180>;<180>
			while (aimy2position >  <180>) aimy2position = aimy2position - <360>;
			while (aimy2position < <-180>) aimy2position = aimy2position + <360>;
			while (aimy2delta >  <180>) aimy2delta = aimy2delta - <360>;
			while (aimy2delta < <-180>) aimy2delta = aimy2delta + <360>;
		
			//number of frames required to decelerate to 0
			timetozero = get ABS(aimy2velocity) / AIMY2_ACCELERATION;
			
			//distance from target where we should start decelerating, always 'positive'
			//pos = t * v - (t*(t-1)*a/2)
			deceleratethreshold = timetozero * (get ABS(aimy2velocity)) - (timetozero * (timetozero - 1) * AIMY2_ACCELERATION / 2); 
			
			//get PRINT ( aimy2delta , deceleratethreshold, aimy2velocity, timetozero );
			
			if (get ABS(aimy2delta) <= deceleratethreshold){ //we need to decelerate
				if (aimy2velocity > 0) aimy2velocity = aimy2velocity - AIMY2_ACCELERATION;
				else 				   aimy2velocity = aimy2velocity + AIMY2_ACCELERATION;
			}	
			else //we need to accelerate
			{
				if (aimy2delta > 0) aimy2velocity = get MIN(       MAX_AIMY2_VELOCITY, aimy2velocity + AIMY2_ACCELERATION); 
				else                aimy2velocity = get MAX((-1) * MAX_AIMY2_VELOCITY, aimy2velocity - AIMY2_ACCELERATION);
			}
			
			//Apply jerk at very low velocities
			if (get ABS(aimy2velocity) < AIMY2_JERK){
				if ((aimy2delta >        AIMY2_JERK)) aimy2velocity =        AIMY2_JERK;
				if ((aimy2delta < (-1) * AIMY2_JERK)) aimy2velocity = (-1) * AIMY2_JERK;
			}
			
			aimy2position = aimy2position + aimy2velocity; 
			turn body1 to y-axis aimy2position now;
			aimy2delta = aimy2target - aimy2position ; 	
		}
		sleep 30;		
	}
	aimy2velocity = 0;
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	while( !Static_Var_3 )
	{
		sleep 250;
	}
	turn turretr to y-axis heading speed <500.000000>;
	wait-for-turn turretr around y-axis;

	return (1);
}

FirePrimary()
{
	start-script RockZ(-27,aimDir);
	emit-sfx 1024 + 0 from flareb;
	move boreb to z-axis [-4.000000] speed [500.000000];
	move barrelb to z-axis [-4.000000] speed [500.000000];
	sleep 150;
	move boreb to z-axis [0.000000] speed [3.000000];
	move barrelb to z-axis [0.000000] speed [3.000000];
}

FireSecondary()
{
	sleep 150;
}

FireTertiary()
{
	if( gun_3 == 0 )
	{
		gun_3 = 1;
		return (0);
	}
	else
	{
		
	   	gun_3 = 0 ;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = aimpoint;
}

AimFromSecondary(piecenum)
{
	piecenum = body1;
}

AimFromTertiary(piecenum)
{
	piecenum = turretr;
}

QueryPrimary(piecenum)
{
	piecenum = flareb;
}

QuerySecondary(piecenum)
{
	piecenum = flareg;
}

QueryTertiary(piecenum)
{
	if( gun_3 == 0 )
	{
		piecenum = flarer1;
	}
	else
	{
		piecenum = flarer2;
	}
	
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode body1 type BITMAPONLY | NOHEATCLOUD;
		explode turretg type BITMAPONLY | NOHEATCLOUD;
		explode boreg type BITMAPONLY | NOHEATCLOUD;
		explode barrelg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flareg type BITMAPONLY | NOHEATCLOUD;
		explode neck type BITMAPONLY | NOHEATCLOUD;
		explode turretr type BITMAPONLY | NOHEATCLOUD;
		explode borer type BITMAPONLY | NOHEATCLOUD;
		explode barrelr type BITMAPONLY | NOHEATCLOUD;
		explode flarer1 type BITMAPONLY | NOHEATCLOUD;
		explode flarer2 type BITMAPONLY | NOHEATCLOUD;
		explode turretb type BITMAPONLY | NOHEATCLOUD;
		explode boreb type BITMAPONLY | NOHEATCLOUD;
		explode barrelb type BITMAPONLY | NOHEATCLOUD;
		explode flareb type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretg type FALL | NOHEATCLOUD;
		explode boreg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flareg type FALL | NOHEATCLOUD;
		explode neck type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode borer type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flarer1 type FALL | NOHEATCLOUD;
		explode flarer2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretb type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode boreb type FALL | NOHEATCLOUD;
		explode barrelb type FALL | NOHEATCLOUD;
		explode flareb type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode body1 type BITMAPONLY | NOHEATCLOUD;
		explode turretg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode boreg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flareg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode neck type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode turretr type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode borer type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flarer1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flarer2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode turretb type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode boreb type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelb type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flareb type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode body1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turretg type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode boreg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flareg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode neck type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turretr type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode borer type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flarer1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flarer2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turretb type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode boreb type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrelb type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flareb type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
