#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad1, pad0, dish, wake, bow, beam1, beam2, nano1, nano2, anti, dtr, dtl, dbr, dbl, blink;

static-var  Static_Var_1, oldHead;
static-var  Stunned;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				3

#define BASEPIECE base
#define HITSPEED <10.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 10
#define MAXTILT 200

#include "unit_hitbyweaponid_and_smoke.h"

Lights()
{
	while( TRUE )
	{
	    if (!Stunned) {
		    emit-sfx 1024 + 0 from blink;
		}
		sleep 2500;
	}
	sleep 50;
	start-script Lights();
}

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.11> )
		{
			rockSpeed = <1.25> - get ABS(rockAng);
			turn base to x-axis rockAng speed rockSpeed*2;
			wait-for-turn base around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}



Go()
{
	spin dish around y-axis speed <-50.043956> accelerate <2>;
	return (0);
}

Stop()
{
	spin dish around y-axis speed <0.000000>;
	return (0);
}

Create()
{
	hide bow;
	hide blink;
	hide anti;
	hide pad0;
	hide pad1;
	hide wake;
	hide nano2;
	hide nano1;
	Static_Var_1 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
}

Activate()
{
	start-script Lights();
	start-script Go();
}

Deactivate()
{
	start-script Stop();
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-1.0> speed <1.0>;
		move base to y-axis [0.23] speed [0.17];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <1.0>;
		move base to y-axis [0.0] speed [0.17];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	start-script waveSplash();
	var bowtime;
	bowtime = 0;
	while( TRUE )
	{
		emit-sfx 1024 + 1 from wake;
		if (bowtime) emit-sfx 1024 + 2 from bow;
        bowtime = !bowtime;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 12000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.0> speed <1.0>;
	move base to y-axis [0.0] speed [0.17];
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryLandingPad(Func_Var_1, Func_Var_2)
{
	Func_Var_1 = 1;
	Func_Var_2 = 2;
	Static_Var_1 = !Static_Var_1;
	if( Static_Var_1 )
	{
		Func_Var_1 = 2;
		Func_Var_2 = 1;
	}
}

ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	move dbl to x-axis [0] speed [8];
	move dbl to z-axis [0] speed [8];
	move dbr to x-axis [0] speed [8];
	move dbr to z-axis [0] speed [8];
	move dtl to x-axis [0] speed [8];
	move dtl to z-axis [0] speed [8];
	move dtr to x-axis [0] speed [8];
	move dtr to z-axis [0] speed [8];
}
SetStunned(State)
{
    Stunned = State;
	if (Stunned) {
	    call-script Stop();
	} else {
	    call-script Go();
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep 3000;
	start-script ExecuteRestoreAfterDelay();
}


AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	move dbl to x-axis [-5.6] speed [8];
	move dbl to z-axis [-5.6] speed [8];
	move dbr to x-axis [5.6] speed [8];
	move dbr to z-axis [-5.6] speed [8];
	move dtl to x-axis [-5.6] speed [8];  
	move dtl to z-axis [5.6] speed [8];
	move dtr to x-axis [5.6] speed [8];
	move dtr to z-axis [5.6] speed [8];
	wait-for-move dtr along x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	sleep 150;
}

QueryPrimary(piecenum)
{
	piecenum = anti;
}

AimFromPrimary(piecenum)
{
	piecenum = anti;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode beam1 type BITMAPONLY | NOHEATCLOUD;
		explode nano1 type BITMAPONLY | NOHEATCLOUD;
		explode beam2 type BITMAPONLY | NOHEATCLOUD;
		explode nano2 type BITMAPONLY | NOHEATCLOUD;
		explode dish type BITMAPONLY | NOHEATCLOUD;
		//explode wake type BITMAPONLY | NOHEATCLOUD;
		//explode pad1 type BITMAPONLY | NOHEATCLOUD;
		//explode pad0 type BITMAPONLY | NOHEATCLOUD;
		//explode anti type BITMAPONLY | NOHEATCLOUD;
		//explode dbl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode dbr type BITMAPONLY | NOHEATCLOUD;
		//explode dtl type BITMAPONLY | NOHEATCLOUD;
		//explode dtr type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode beam1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano1 type FALL | NOHEATCLOUD;
		explode beam2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake type FALL | NOHEATCLOUD;
		//explode pad1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode pad0 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode anti type FALL | NOHEATCLOUD;
		//explode dbl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode dbr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode dtl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode dtr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode beam1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode beam2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode dish type SMOKE | FALL | NOHEATCLOUD;
		//explode wake type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode pad1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode pad0 type SMOKE | FALL | NOHEATCLOUD;
		//explode anti type SMOKE | FALL | NOHEATCLOUD;
		//explode dbl type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode dbr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode dtl type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode dtr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode beam1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode nano1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode beam2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode dish type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode pad1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode pad0 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode anti type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode dbl type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode dbr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode dtl type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode dtr type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
