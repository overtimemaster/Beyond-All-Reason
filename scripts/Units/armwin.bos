#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, blades, turbine;

static-var  WindSpeed, WindDirection, LastDirection, Built, Stunned;


Go()
{
	sleep RAND(1, 500);
	
	//Take 5s to turn and accelerate
	//Angular speed is always positive, even if the angle is negative. The speed is in Spring angles/second (sa/s). 
	var DirectionDelta;
	DirectionDelta = WindDirection - LastDirection;
	if (DirectionDelta < 0 ) DirectionDelta = 0 - DirectionDelta;
	if (DirectionDelta > <180>) DirectionDelta = DirectionDelta - <180>;
	//get PRINT(get GAME_FRAME,DirectionDelta, WindSpeed, WindDirection);
	
	turn turbine to y-axis WindDirection speed DirectionDelta/7;
	spin blades around z-axis speed WindSpeed accelerate <1.0>;
	//The angular acceleration should always be positive, even if you are spinning the piece at a negative angular speed. 
	//It is measured in Spring angles per frame-second (sa/f*s); in other words, 
	//the speed of the piece will increase by that amount every frame, not every second. There are 30 frames per second. 
	//spin [piece] around [axis] speed [angular speed] accelerate [angular acceleration];
	
}

BuildMe()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	Built = 1;
	call-script Go();
}


Create()
{
	WindSpeed = 800;
	WindDirection = 0;
	LastDirection = 0;
	Built = 0;
	start-script BuildMe();
}

SetSpeed(windSpd) //called every 450 frames
{
	WindSpeed = 0 - windSpd; //invert if desired
	if (!Stunned) {
		if(Built)
		{
			set ACTIVATION to 100;
		}
	}
}

SetDirection(windDir) //called every 450 frames
{
	LastDirection = WindDirection;
	WindDirection = windDir + <180>;
	
	if (!Stunned) {
		if(Built)
		{
			call-script Go();
		}
	}
}

Stop()
{
	stop-spin blades around z-axis decelerate <10.0>;
}

SetStunned(State)
{
	Stunned = State;
	if (State) {
		call-script Stop();
		set ACTIVATION to 0;
	}else{
		//if (statechg_DesiredState == 0) {
		call-script Go();
		
		set ACTIVATION to 100;
		//}
	}
}

/*
InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}
*/
Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turbine type BITMAPONLY | NOHEATCLOUD;
		explode blades type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turbine type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode blades type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turbine type SMOKE | FALL | NOHEATCLOUD;
		explode blades type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turbine type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode blades type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
