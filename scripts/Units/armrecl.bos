#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, barrel, ldoor, rdoor, lfin, rfin, screw;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging, currentSpeed, moveSpeed;

#define SIG_MOVE			2

#define BASEPIECE base
#define HITSPEED <25.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 200

#include "unit_hitbyweaponid_and_smoke.h"

Propcontrol()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*1000/moveSpeed;
		spin screw around z-axis speed <1.000000>*currentSpeed accelerate <10.000000>;
		sleep 33;
	}
}

activatescr()
{
	if( TRUE )
	{
		move barrel to z-axis [2.000000] speed [2.000000];
		sleep 200;
	}
	if( TRUE )
	{
		move ldoor to x-axis [-1.200000] speed [2.000000];
		move rdoor to x-axis [1.200000] speed [2.000000];
		sleep 300;
	}
}

deactivatescr()
{
	if( TRUE )
	{
		move ldoor to x-axis [0.000000] speed [2.000000];
		move rdoor to x-axis [0.000000] speed [2.000000];
		sleep 300;
	}
	if( TRUE )
	{
		move barrel to z-axis [0.000000] speed [2.000000];
		sleep 200;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		move lfin to x-axis [-5.000000] speed [4.000000];
		move rfin to x-axis [5.000000] speed [4.000000];
		emit-sfx 1024 + 0 from base;
		sleep 250;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	move lfin to x-axis [0.000000] speed [4.000000];
	move rfin to x-axis [0.000000] speed [4.000000];
	sleep 1000;	
	return (0);
}

Go()
{
	call-script activatescr();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide flare;
	Static_Var_1 = 0;
	moveSpeed = get MAX_SPEED;
	start-script Propcontrol();
	call-script InitState();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = flare;
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rfin type FIRE | SMOKE | NOHEATCLOUD;
		//explode rdoor type BITMAPONLY | NOHEATCLOUD;
		//explode lfin type BITMAPONLY | NOHEATCLOUD;
		explode barrel type BITMAPONLY | NOHEATCLOUD;
		//explode flare type BITMAPONLY | NOHEATCLOUD;
		//explode ldoor type BITMAPONLY | NOHEATCLOUD;
		explode screw type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rfin type FIRE | SMOKE | NOHEATCLOUD;
		explode rdoor type FIRE | SMOKE | NOHEATCLOUD;
		//explode lfin type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type NOHEATCLOUD;
		//explode flare type FALL | NOHEATCLOUD;
		//explode ldoor type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode screw type FIRE | SMOKE | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | NOHEATCLOUD;
		explode rfin type SMOKE | NOHEATCLOUD;
		explode rdoor type SMOKE | NOHEATCLOUD;
		explode lfin type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		//explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode ldoor type SMOKE | FALL | NOHEATCLOUD;
		explode screw type FIRE | SMOKE | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		explode rfin type EXPLODE_ON_HIT | FIRE | NOHEATCLOUD;
		explode rdoor type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		explode lfin type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | NOHEATCLOUD;
		//explode flare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode ldoor type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode screw type EXPLODE_ON_HIT | FIRE | NOHEATCLOUD;
	return corpsetype;
}
