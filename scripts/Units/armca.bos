#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"


#define SIG_BUILD		4	

piece  base, wingbr, wingbl, wingfr, wingfl, arm1, arm2, nano, emit, doorbl, doorbr, doortl, doortr, thrust;

static-var  statechg_DesiredState, statechg_StateChanging;


activatescr()
{

	show thrust;
	if( TRUE )
	{
		turn wingbr to x-axis <-90> speed <90>;
		turn wingbl to x-axis <-90> speed <90>;
		turn wingfr to z-axis <-90> speed <90>;
		turn wingfl to z-axis <90> speed <90>;
		sleep 908;
	}
	sleep 40;
	return (0);
}

deactivatescr()
{
	hide thrust;
	if( TRUE )
	{
		turn wingbr to x-axis <0> speed <90>;
		turn wingbl to x-axis <0> speed <90>;
		turn wingfr to z-axis <0> speed <90>;
		turn wingfl to z-axis <0> speed <90>;
		turn doorbl to z-axis <0> speed <270>;
		turn doorbr to z-axis  <0> speed <270>;
		turn arm1 to x-axis <0> speed <60>;
		turn arm2 to x-axis <0> speed <-500>;
		turn nano to x-axis <0> speed <300>;  
		wait-for-turn arm1 around x-axis;
		sleep 908;
	}
	sleep 40;
	return (0);
}

#define SMOKEPIECE base
static-var isSmoking;
SmokeUnit(healthpercent) // ah yes, clever use of stack variables 
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if (healthpercent > 66) {
			sleep 97;
			isSmoking = 0;
			return;
		}
		if (healthpercent < 4 ) healthpercent = 4;
		sleep healthpercent * 50;

		if( Rand( 1, 66 ) < healthpercent ) emit-sfx 257 from SMOKEPIECE;
		else emit-sfx 258 from SMOKEPIECE;
	}
}

// this is what a pure hitbyweapon can look like, without any of the motion garbage
HitByWeapon(anglex, anglez) //weaponID is always 0,lasers and flamers give angles of 0
{
	if( get BUILD_PERCENT_LEFT) return (0);
	if (isSmoking == 0)	{ 
		isSmoking = 1;
		start-script SmokeUnit();
	}	
	turn base to z-axis anglez speed <105.000000>;
	turn base to x-axis <0> - anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <15.000000>;
	turn base to x-axis <0.000000> speed <15.000000>;
}

#define IDLEHOVERSCALE 32
#define IDLEHOVERSPEED 60
#define IDLEBASEPIECE base
#include "idlehover.h"

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	hide emit;
	hide thrust;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script IdleHover();
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}


StartBuilding(heading, pitch)
{
	
	start-script RequestState(0);
	signal SIG_BUILD;
	turn doorbl to z-axis <-135> speed <270>;
	turn doorbr to z-axis  <135> speed <270>;
	turn arm1 to x-axis <-60> speed <60>;
	turn arm2 to x-axis <-250> speed <-500>;
	turn nano to x-axis <150> speed <300>;  
	wait-for-turn arm1 around x-axis;
	set INBUILDSTANCE to 1;
}


StopBuilding()
{
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_BUILD;	
	start-script RequestState(1);

	set INBUILDSTANCE to 0;
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = emit;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode wingbl type BITMAPONLY | NOHEATCLOUD;
		explode wingfr type BITMAPONLY | NOHEATCLOUD;
		explode wingfl type BITMAPONLY | NOHEATCLOUD;
		explode wingbr type BITMAPONLY | NOHEATCLOUD;
		explode doorbl type BITMAPONLY | NOHEATCLOUD;
		explode doorbr type BITMAPONLY | NOHEATCLOUD;
		explode doortl type BITMAPONLY | NOHEATCLOUD;
		explode doortr type BITMAPONLY | NOHEATCLOUD;
		explode thrust type BITMAPONLY | NOHEATCLOUD;
		explode arm1 type BITMAPONLY | NOHEATCLOUD;
		explode arm2 type BITMAPONLY | NOHEATCLOUD;
		explode nano type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode emit type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode wingbl type BITMAPONLY | NOHEATCLOUD;
		explode wingfr type BITMAPONLY | NOHEATCLOUD;
		explode wingfl type BITMAPONLY | NOHEATCLOUD;
		explode wingbr type BITMAPONLY | NOHEATCLOUD;
		explode doorbl type BITMAPONLY | NOHEATCLOUD;
		explode doorbr type BITMAPONLY | NOHEATCLOUD;
		explode doortl type BITMAPONLY | NOHEATCLOUD;
		explode doortr type BITMAPONLY | NOHEATCLOUD;
		explode thrust type BITMAPONLY | NOHEATCLOUD;
		explode arm1 type BITMAPONLY | NOHEATCLOUD;
		explode arm2 type BITMAPONLY | NOHEATCLOUD;
		explode nano type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode emit type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode wingbl type BITMAPONLY | NOHEATCLOUD;
		explode wingfr type BITMAPONLY | NOHEATCLOUD;
		explode wingfl type BITMAPONLY | NOHEATCLOUD;
		explode wingbr type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode doorbl type BITMAPONLY | NOHEATCLOUD;
		explode doorbr type BITMAPONLY | NOHEATCLOUD;
		explode doortl type BITMAPONLY | NOHEATCLOUD;
		explode doortr type BITMAPONLY | NOHEATCLOUD;
		explode thrust type BITMAPONLY | NOHEATCLOUD;
		explode arm1 type BITMAPONLY | NOHEATCLOUD;
		explode arm2 type BITMAPONLY | NOHEATCLOUD;
		explode nano type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode emit type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode wingbl type BITMAPONLY | NOHEATCLOUD;
		explode wingfr type BITMAPONLY | NOHEATCLOUD;
		explode wingfl type BITMAPONLY | NOHEATCLOUD;
		explode wingbr type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode doorbl type BITMAPONLY | NOHEATCLOUD;
		explode doorbr type BITMAPONLY | NOHEATCLOUD;
		explode doortl type BITMAPONLY | NOHEATCLOUD;
		explode doortr type BITMAPONLY | NOHEATCLOUD;
		explode thrust type BITMAPONLY | NOHEATCLOUD;
		explode arm1 type BITMAPONLY | NOHEATCLOUD;
		explode arm2 type BITMAPONLY | NOHEATCLOUD;
		explode nano type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode emit type BITMAPONLY | NOHEATCLOUD;
	return corpsetype;
}
