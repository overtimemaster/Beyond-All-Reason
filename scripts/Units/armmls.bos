#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  ground, base, door1, door2, NanoTurret, Nanoemit;

static-var  Static_Var_2, statechg_DesiredState, statechg_StateChanging, oldHead;

// Signal definitions
#define SIG_MOVE			2

SetDirection(heading)
{
	var spd;
	spd = (get ABS(oldHead) - get ABS(heading)) / 2;
	turn ground to y-axis heading speed spd;
	turn base to y-axis 0-heading speed spd;
	oldHead = heading;
}


#define BASEPIECE base
#define HITSPEED <25.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

RockOnWaves()
{
	while(1)
	{
		turn ground to x-axis <1.0> speed <1.5>;
		move ground to y-axis [0.0] speed [0.15];
		wait-for-turn ground around x-axis;
		turn ground to x-axis <-1.0> speed <1.5>;
		move ground to y-axis [-0.1] speed [0.15];
		wait-for-move ground along y-axis;
		move ground to y-axis [0.0] speed [0.15];
		wait-for-turn ground around x-axis;
		turn ground to x-axis <1.0> speed <1.5>;
		move ground to y-axis [-0.1] speed [0.15];
		wait-for-move ground along y-axis;
	}
}


activatescr()
{
	move door1 to y-axis [1] speed [3];
	move door2 to y-axis [1] speed [3];
	sleep 333;
	
	move door1 to x-axis [3.4] speed [9];
	move door2 to x-axis [-3.4] speed [9];
	sleep 333;
	
	move nanoturret to y-axis [8] speed [24];
	sleep 333;

}

deactivatescr()
{

	move nanoturret to y-axis [0] speed [24];
	sleep 333;
	
	
	move door1 to x-axis [0] speed [9];
	move door2 to x-axis [0] speed [9];
	sleep 333;
	
	move door1 to y-axis [0] speed [3];
	move door2 to y-axis [0] speed [3];
	sleep 333;
}

Go()
{
	call-script activatescr();
	turn NanoTurret to y-axis <180>+Static_Var_2 speed <160.000000>;
	wait-for-turn NanoTurret around y-axis;
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn NanoTurret to y-axis <0.000000> speed <180.000000>;
	wait-for-turn NanoTurret around y-axis;
	call-script deactivatescr();
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script Stop();
			currentstate = 1;
		}
		else
		{
			call-script Go();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}



Create()
{
	hide nanoemit;
	hide ground;
	Static_Var_2 = 0;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_2 = Func_Var_1;
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-3.0> speed <3.0>;
		move base to y-axis [0.23] speed [0.23];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <3.0>;
		move base to y-axis [0.0] speed [0.23];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 1024 + 0 from ground;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 15000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.0> speed <3.0>;
	move base to y-axis [0.0] speed [0.23];
}


AimPrimary(heading, pitch)
{
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	piecenum = base;
}


QueryNanoPiece(piecenum)
{
	piecenum = nanoemit;
}

TargetHeading(Func_Var_1)
{
	Static_Var_2 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = ground;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode ground type BITMAPONLY | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode nanoturret type BITMAPONLY | NOHEATCLOUD;
		//explode nanoemit type BITMAPONLY | NOHEATCLOUD;
		explode door2 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode nanoturret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode nanoemit type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nanoturret type SMOKE | FALL | NOHEATCLOUD;
		//explode nanoemit type SMOKE | FALL | NOHEATCLOUD;
		explode door2 type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode ground type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode door1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nanoturret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode nanoemit type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
