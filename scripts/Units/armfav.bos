#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, lfwheel, rfwheel, bwheel, gun, flare;

static-var  restore_delay, moveSpeed, wheelSpeed, Static_Var_1, gun_2, statechg_DesiredState, statechg_StateChanging,
			oldHeading;

// Signal definitions
#define SIG_MOVE 			2
#define SIG_AIM				4

Steering(heading, steer, currentSpeed)
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while(1)
	{
		heading = get HEADING;
		steer = (heading - oldheading)*3;
		turn rfwheel to y-axis steer speed <180>;	
		turn lfwheel to y-axis steer speed <180>;	
		currentSpeed = <3.92> *((get CURRENT_SPEED) * 100 / get MAX_SPEED);
		if (currentSpeed < <100>) currentSpeed = <100>;
		spin rfwheel around x-axis speed currentSpeed;
		spin lfwheel around x-axis speed currentSpeed;
		spin bwheel around x-axis speed currentSpeed;
		sleep 66;
		oldheading = heading;
	}
}

//WheelControl()
//{
//	while(TRUE)
//	{
//		currentSpeed = (get CURRENT_SPEED)*20/moveSpeed;
//		wheelSpeed = currentSpeed * 40; //original speed 7
//		if (currentSpeed<1) currentSpeed=1;	// prevent infinite timing
//		spin lfwheel around x-axis speed  (<1> * wheelSpeed);         //(<1.000000> * wheelSpeed ) * 2 accelerate <5.000000> * currentSpeed;
//		spin rfwheel around x-axis speed  (<1> * wheelSpeed);				//(<0.5.000000> * wheelSpeed ) * 2 accelerate <5.000000> * currentSpeed;
//		spin bwheels around x-axis speed  (<0.7> * wheelSpeed);		 //(<0.5.000000> * wheelSpeed ) * 2 accelerate <5.000000> * currentSpeed;
//		sleep 50; //200
//	}
// }



#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

Create()
{
	hide flare;
	Static_Var_1 = 0;
	oldheading = get HEADING;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	hide flare;
}
//Create()
//{
//	restore_delay = 3000;
//	moveSpeed = get MAX_SPEED;
//	start-script SmokeUnit();
//	return (0);
//}

StartMoving()
{
	start-script Steering();
}

StopMoving()
{
	signal SIG_MOVE;
	stop-spin rfwheel around x-axis;
	stop-spin lfwheel around x-axis;
	stop-spin bwheel around x-axis;
}



//following block returns weapon in straight position after firing

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
   if (Stunned) {
       return (1);
    }
	turn gun to y-axis <0.000000> speed <90.000000>;
	turn gun to x-axis <0.000000> speed <50.000000>;
 }
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}





AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn gun to y-axis heading speed <200.000000>;
	turn gun to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn gun around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode gun type BITMAPONLY | NOHEATCLOUD;
		explode rfwheel type BITMAPONLY | NOHEATCLOUD;
		explode lfwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bwheel type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode gun type FALL | NOHEATCLOUD;
		explode lfwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lfwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode gun type SMOKE | FALL | NOHEATCLOUD;
		explode lfwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rfwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode gun type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lfwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rfwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bwheel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
