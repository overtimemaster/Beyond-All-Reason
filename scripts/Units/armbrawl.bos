#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SIG_AIM				2
piece  flare1, flare2, base, wingl, wingr, finl, finr, fan, flare3, flare4,pivot;

static-var  gun_1, statechg_DesiredState, statechg_StateChanging;


activatescr()
{
	if( TRUE )
	{
		spin fan around y-axis speed <200> accelerate <20>;
		sleep 998;
	}
	if( TRUE )
	{
		turn pivot to x-axis <90> speed <90>;
		sleep 498;
	}
	if( TRUE )
	{
		turn finl to z-axis <90> speed <90>;
		turn finr to z-axis <-90> speed <90>;
		turn wingl to y-axis <-30> speed <30>;
		turn wingr to y-axis <30> speed <30>;
		sleep 998;
	}
	sleep 102;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

#define BASEPIECE base
#define HITSPEED <100.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

deactivatescr()
{


	if( TRUE )
	{
		turn pivot to x-axis <0> speed <90>;
		sleep 498;
	}	
	if( TRUE )
	{
		turn finl to z-axis <0> speed <90>;
		turn finr to z-axis <0> speed <90>;
		turn wingl to y-axis <0> speed <30>;
		turn wingr to y-axis <0> speed <30>;
		sleep 998;
	}
	if( TRUE )
	{
		stop-spin fan around y-axis decelerate <1>;
		sleep 998;
	}
	sleep 102;
	return (0);
}

#define IDLEHOVERSCALE 32
#define IDLEHOVERSPEED 60
#define IDLEBASEPIECE base
#include "idlehover.h"



InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn pivot to x-axis <90> speed <180>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep 500;
	start-script ExecuteRestoreAfterDelay();
}
Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	hide pivot;
	gun_1 = flare1;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script IdleHover();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		gun_1 = flare1;
		return (0);
	}
	if( gun_1 == 1 )
	{
		gun_1 = flare2;
		return (0);
	}
	if( gun_1 == 2 )
	{
		gun_1 = flare3;
		return (0);
	}
	if( gun_1 == 3 )
	{
		gun_1 = flare4;
		return (0);
	}
}

QueryPrimary(piecenum)
{
	piecenum=base;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn pivot to x-axis <0> speed <180>;
	start-script RestoreAfterDelay();
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = base;

}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode pivot type BITMAPONLY | NOHEATCLOUD;
		explode fan type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare4 type BITMAPONLY | NOHEATCLOUD;
		explode flare3 type BITMAPONLY | NOHEATCLOUD;
		explode flare2 type BITMAPONLY | NOHEATCLOUD;
		explode flare1 type BITMAPONLY | NOHEATCLOUD;
		explode finr type BITMAPONLY | NOHEATCLOUD;
		explode wingr type BITMAPONLY | NOHEATCLOUD;
		explode finl type BITMAPONLY | NOHEATCLOUD;
		explode wingl type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode pivot type SMOKE | FALL | NOHEATCLOUD;
		explode fan type BITMAPONLY | NOHEATCLOUD;
		explode flare4 type BITMAPONLY | NOHEATCLOUD;
		explode flare3 type BITMAPONLY | NOHEATCLOUD;
		explode flare2 type BITMAPONLY | NOHEATCLOUD;
		explode flare1 type BITMAPONLY | NOHEATCLOUD;
		explode finr type SMOKE | FALL | NOHEATCLOUD;
		explode wingr type BITMAPONLY | NOHEATCLOUD;
		explode finl type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode wingl type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode pivot type BITMAPONLY | NOHEATCLOUD;
		explode fan type SMOKE | FALL | NOHEATCLOUD;
		explode flare4 type BITMAPONLY | NOHEATCLOUD;
		explode flare3 type BITMAPONLY | NOHEATCLOUD;
		explode flare2 type BITMAPONLY | NOHEATCLOUD;
		explode flare1 type BITMAPONLY | NOHEATCLOUD;
		explode finr type SMOKE | FALL | NOHEATCLOUD;
		explode wingr type BITMAPONLY | NOHEATCLOUD;
		explode finl type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode wingl type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode pivot type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode fan type BITMAPONLY | NOHEATCLOUD;
		explode flare4 type BITMAPONLY | NOHEATCLOUD;
		explode flare3 type BITMAPONLY | NOHEATCLOUD;
		explode flare2 type BITMAPONLY | NOHEATCLOUD;
		explode flare1 type BITMAPONLY | NOHEATCLOUD;
		explode finr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode wingr type BITMAPONLY | NOHEATCLOUD;
		explode finl type BITMAPONLY | NOHEATCLOUD;
		explode wingl type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
