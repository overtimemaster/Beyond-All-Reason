#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, wingl, wingr, fanl, fanr, turretl, turretr, flarel, flarer, thrust;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, statechg_DesiredState, statechg_StateChanging, gun_1;

// Signal definitions
#define SIG_MOVE			2


activatescr()
{
	if( TRUE )
	{
		
		spin fanl around y-axis speed <200> accelerate <8>;
		spin fanr around y-axis speed <-200> accelerate <8>;
		turn wingl to z-axis <90> speed <90.000000>;
		turn wingr to z-axis <-90> speed <90.000000>;
		sleep 690;
	}
	sleep 10;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
	
		stop-spin fanl around y-axis decelerate <8>;
		stop-spin fanr around y-axis decelerate <8>;
		turn wingl to z-axis <0> speed <90.000000>;
		turn wingr to z-axis <0> speed <90.000000>;
		sleep 990;
	}
	sleep 10;
	return (0);
}

#define BASEPIECE base
#define HITSPEED <105.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"



InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

static-var maxSpeed, currentSpeed;
BarrelRoll() // remember to start-script BarrelRoll(); in Create()!
{
	currentSpeed = (get CURRENT_SPEED);
	maxSpeed = (get MAX_SPEED);
	
	while (TRUE){
		sleep 2000;
		currentSpeed = (get CURRENT_SPEED);
		//get PRINT(maxSpeed, currentSpeed, Static_Var_1);
		if( Rand( 1, 5 ) == 1 AND (maxSpeed < (currentSpeed+100) ) )
		{
			turn base to z-axis <240.054945> speed <120.027473>;
			wait-for-turn base around z-axis;
			turn base to z-axis <120.027473> speed <180.043956>;
			wait-for-turn base around z-axis;
			turn base to z-axis <0.000000> speed <120.027473>;
		}
	}
}
Create()
{
	hide flarel;
	hide flarer;
	hide thrust;
	gun_1=0;
	call-script InitState();
	start-script BarrelRoll();
	return (0);
}

Activate()
{
	show thrust;
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	hide thrust;
	start-script RequestState(1);
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;

}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

AimPrimary(heading, pitch)
{
	return (1);
}

FirePrimary()
{
	return (0);
}

AimSecondary(heading, pitch)
{
	return (1);
}

FireSecondary()
{
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flarel;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = flarer;
	return (0);
}



SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thrust type BITMAPONLY | NOHEATCLOUD;
		explode fanr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode wingr type BITMAPONLY | NOHEATCLOUD;
		explode turretr type BITMAPONLY | NOHEATCLOUD;
		explode flarer type BITMAPONLY | NOHEATCLOUD;
		explode turretl type BITMAPONLY | NOHEATCLOUD;
		explode flarel type BITMAPONLY | NOHEATCLOUD;
		explode fanl type BITMAPONLY | NOHEATCLOUD;
		explode wingl type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thrust type BITMAPONLY | NOHEATCLOUD;
		explode fanr type BITMAPONLY | NOHEATCLOUD;
		explode wingr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretr type BITMAPONLY | NOHEATCLOUD;
		explode flarer type BITMAPONLY | NOHEATCLOUD;
		explode turretl type BITMAPONLY | NOHEATCLOUD;
		explode flarel type BITMAPONLY | NOHEATCLOUD;
		explode fanl type BITMAPONLY | NOHEATCLOUD;
		explode wingl type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thrust type BITMAPONLY | NOHEATCLOUD;
		explode fanr type BITMAPONLY | NOHEATCLOUD;
		explode wingr type BITMAPONLY | NOHEATCLOUD;
		explode turretr type BITMAPONLY | NOHEATCLOUD;
		explode flarer type BITMAPONLY | NOHEATCLOUD;
		explode turretl type BITMAPONLY | NOHEATCLOUD;
		explode flarel type BITMAPONLY | NOHEATCLOUD;
		explode fanl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode wingl type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thrust type BITMAPONLY | NOHEATCLOUD;
		explode fanr type BITMAPONLY | NOHEATCLOUD;
		explode wingr type NOHEATCLOUD | NOHEATCLOUD;
		explode turretr type BITMAPONLY | NOHEATCLOUD;
		explode flarer type BITMAPONLY | NOHEATCLOUD;
		explode turretl type BITMAPONLY | NOHEATCLOUD;
		explode flarel type BITMAPONLY | NOHEATCLOUD;
		explode fanl type BITMAPONLY | NOHEATCLOUD;
		explode wingl type FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
