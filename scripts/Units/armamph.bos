#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  pelvis, torso, rthigh, rleg, rfoot, lthigh, lleg, lfoot, prop, barrel, flare, turret, misbarrel, lmisflare, rmisflare;

static-var  bMoving, bAiming, Static_Var_3, Static_Var_4, gun_3,
            restore_delay, Static_Var_7, wpn1_lasthead, wpn3_lasthead;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM_3			8


walk()
{
	if( TRUE )
	{
		
		turn rthigh to x-axis <0> speed <555.000000>;
		turn rleg to x-axis <0> speed <382.500000>;
		turn rfoot to x-axis <0> speed <127.500000>;
		
		
		turn lthigh to x-axis <56> speed <420.000000>;
		turn lleg to x-axis <-29> speed <217.500000>;
		turn lfoot to x-axis <-60> speed <450.000000>;
		
		move pelvis to y-axis [0] now;
		sleep 120;
		
		turn rthigh to x-axis <35> speed <262.500000>;
		turn rleg to x-axis <8> speed <60.000000>;
		turn rfoot to x-axis <-38> speed <285.000000>;
		
		
		turn lthigh to x-axis <-44> speed <750.000000>;
		turn lleg to x-axis <11> speed <300.000000>;
		turn lfoot to x-axis <-19> speed <307.500000>;
		move pelvis to y-axis [0.5] speed [3.750000];
		sleep 120;
		
		turn rthigh to x-axis <41> speed <45.000000>;
		turn rleg to x-axis <20> speed <90.000000>;
		turn rfoot to x-axis <-47> speed <67.500000>;
		
		turn lthigh to x-axis <-74> speed <225.000000>;
		turn lleg to x-axis <51> speed <300.000000>;
		turn lfoot to x-axis <17> speed <270.000000>;
		
		move pelvis to y-axis [-0.5] speed [7.500000];
		sleep 120;
		
		
		turn rthigh to x-axis <56> speed <112.500000>;
		turn rleg to x-axis <-29> speed <367.500000>;
		turn rfoot to x-axis <-60> speed <97.500000>;
		
		turn lthigh to x-axis <0> speed <555.000000>;
		turn lleg to x-axis <0> speed <382.500000>;
		turn lfoot to x-axis <0> speed <127.500000>;
		
		move pelvis to y-axis [0] speed [3.750000];
		sleep 120;
		
		
		turn rthigh to x-axis <-44> speed <750.000000>;
		turn rleg to x-axis <11> speed <300.000000>;
		turn rfoot to x-axis <-19> speed <307.500000>;
		
		turn lthigh to x-axis <35> speed <262.500000>;
		turn lleg to x-axis <8> speed <60.000000>;
		turn lfoot to x-axis <-38> speed <285.000000>;
		
		move pelvis to y-axis [0.5] speed [3.750000];
		sleep 120;
		
		
		turn rthigh to x-axis <-74> speed <225.000000>;
		turn rleg to x-axis <51> speed <300.000000>;
		turn rfoot to x-axis <17> speed <270.000000>;
		
		turn lthigh to x-axis <41> speed <45.000000>;
		turn lleg to x-axis <20> speed <90.000000>;
		turn lfoot to x-axis <-47> speed <67.500000>;
		
		
		move pelvis to y-axis [-0.5] speed [7.500000];
		sleep 120;
	}	

}

walklegs()
{
			turn rthigh to x-axis <0> speed <555.000000>;
		turn rleg to x-axis <0> speed <382.500000>;
		turn rfoot to x-axis <0> speed <127.500000>;
		
		turn lthigh to x-axis <56> speed <112.500000>;
		turn lleg to x-axis <-29> speed <367.500000>;
		turn lfoot to x-axis <-60> speed <97.500000>;
		
		move pelvis to y-axis [0] speed [3.750000];
		sleep 120;
		
		turn rthigh to x-axis <35> speed <262.500000>;
		turn rleg to x-axis <8> speed <60.000000>;
		turn rfoot to x-axis <-38> speed <285.000000>;
		
		
		turn lthigh to x-axis <-44> speed <750.000000>;
		turn lleg to x-axis <11> speed <300.000000>;
		turn lfoot to x-axis <-19> speed <307.500000>;
		move pelvis to y-axis [0.5] speed [3.750000];
		sleep 120;
		
		turn rthigh to x-axis <41> speed <45.000000>;
		turn rleg to x-axis <20> speed <90.000000>;
		turn rfoot to x-axis <-47> speed <67.500000>;
		
		turn lthigh to x-axis <-74> speed <225.000000>;
		turn lleg to x-axis <51> speed <300.000000>;
		turn lfoot to x-axis <17> speed <270.000000>;
		
		move pelvis to y-axis [-0.5] speed [7.500000];
		sleep 120;
		
		
		turn rthigh to x-axis <56> speed <112.500000>;
		turn rleg to x-axis <-29> speed <367.500000>;
		turn rfoot to x-axis <-60> speed <97.500000>;
		
		turn lthigh to x-axis <0> speed <555.000000>;
		turn lleg to x-axis <0> speed <382.500000>;
		turn lfoot to x-axis <0> speed <127.500000>;
		
		move pelvis to y-axis [0] speed [3.750000];
		sleep 120;
		
		
		turn rthigh to x-axis <-44> speed <750.000000>;
		turn rleg to x-axis <11> speed <300.000000>;
		turn rfoot to x-axis <-19> speed <307.500000>;
		
		turn lthigh to x-axis <35> speed <262.500000>;
		turn lleg to x-axis <8> speed <60.000000>;
		turn lfoot to x-axis <-38> speed <285.000000>;
		
		move pelvis to y-axis [0.5] speed [3.750000];
		sleep 120;
		
		
		turn rthigh to x-axis <-74> speed <225.000000>;
		turn rleg to x-axis <51> speed <300.000000>;
		turn rfoot to x-axis <17> speed <270.000000>;
		
		turn lthigh to x-axis <41> speed <45.000000>;
		turn lleg to x-axis <20> speed <90.000000>;
		turn lfoot to x-axis <-47> speed <67.500000>;
		
		
		move pelvis to y-axis [-0.5] speed [7.500000];
		sleep 120;
}

transform()
{
	move pelvis to y-axis [-12] speed [24];
	turn lthigh to x-axis <15> speed <100>;
	turn lleg to x-axis <-60> speed <100>;
	turn lfoot to x-axis <15> speed  <100>;
	turn rthigh to x-axis <15> speed <100>;
	turn rleg to x-axis <-60> speed <100>;
	turn rfoot to x-axis <15> speed  <100>;
	sleep 300;
	return (0);
}

reform()
{
	move pelvis to y-axis [0] speed [24];
	turn lthigh to x-axis <0> speed <100>;
	turn lleg to x-axis <0> speed <100>;
	turn lfoot to x-axis <0> speed  <100>;
	turn rthigh to x-axis <0> speed <100>;
	turn rleg to x-axis <0> speed <100>;
	turn rfoot to x-axis <0> speed  <100>;
	sleep 300;
	return (0);
}

swim()
{
	spin prop around z-axis speed <100>;
	sleep 100;
	return (0);
}

#define BASEPIECE pelvis
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 2
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"


MotionControl(Func_Var_1)
{
	Func_Var_1 = 1;
	while( TRUE )
	{
		if( !Static_Var_4 )
		{
			if( Static_Var_7 == 2 )
			{
				call-script transform();
				Static_Var_4 = 1;
				Func_Var_1 = 1;
			}
			if( Static_Var_7 == 3 )
			{
				call-script transform();
				Static_Var_4 = 1;
				Func_Var_1 = 1;
			}
		}
		if( Static_Var_4 )
		{
			if( Static_Var_7 == 1 )
			{
				call-script reform();
				Static_Var_4 = 0;
				Func_Var_1 = 1;
			}
			if( Static_Var_7 == 4 )
			{
				call-script reform();
				Static_Var_4 = 0;
				Func_Var_1 = 1;
			}
		}
		if( bMoving )
		{
			if( bAiming )
			{
				Static_Var_3 = 1;
				if( Static_Var_4 )
				{
					call-script swim();
				}
				if( !Static_Var_4 )
				{
					call-script walklegs();
				}
			}
			if( !bAiming )
			{
				Static_Var_3 = 0;
				if( Static_Var_4 )
				{
					call-script swim();
				}
				if( !Static_Var_4 )
				{
					call-script walk();
				}
			}
			Func_Var_1 = 1;
		}
		if( !bMoving )
		{
			Static_Var_3 = 1;
			if( Func_Var_1 AND ( !Static_Var_4 ) )
			{
				Func_Var_1 = 0;
			}
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	hide rmisflare;
	hide lmisflare;
	hide flare;
	bMoving = FALSE;
	bAiming = FALSE;
	Static_Var_3 = 1;
	Static_Var_4 = 0;
	gun_3 = 0;
	restore_delay = 3000;
	start-script MotionControl();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_7 == 1 )
		{
			emit-sfx 2 from prop;
			emit-sfx 2 from prop;
			emit-sfx 2 from prop;
			emit-sfx 2 from prop;
		}
		if( Static_Var_7 == 2 )
		{
			emit-sfx 2 from prop;
			emit-sfx 2 from prop;
			emit-sfx 2 from prop;
			emit-sfx 2 from prop;
		}
		if( Static_Var_7 == 3 )
		{
			emit-sfx 259 from prop;
			emit-sfx 259 from prop;
		}
		sleep 250;
	}
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_7 = Func_Var_1;
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = torso;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	turn torso to y-axis <0.000000> speed <90.000000>;
	turn turret to y-axis <0.000000> speed <90.000000>;
	turn misbarrel to x-axis <0.000000> speed <90.000000>;
	wait-for-turn torso around y-axis;
	wait-for-turn turret around y-axis;
	wait-for-turn misbarrel around x-axis;
	wpn3_lasthead = 1000000;
	wpn1_lasthead = 1000000;
	bAiming = FALSE;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	set-signal-mask SIG_AIM;
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	bAiming = TRUE;
	while( !Static_Var_3 )
	{
		return(0);
	}
	turn torso to y-axis heading speed <150.000000>;
	if (((get ABS(wpn1_lasthead - heading)) > 65536) OR(((get ABS(wpn1_lasthead - heading)) > 1300) AND ((get ABS(wpn1_lasthead - heading)) < 64236)))
	{
		wpn1_lasthead = 1000000;
		wait-for-turn torso around y-axis;
	}
	start-script RestoreAfterDelay();
	wpn1_lasthead = heading;
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from flare;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = barrel;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = misbarrel;
	return (0);
}

QuerySecondary(piecenum)
{
	if( gun_3 == 0 )
	{
		piecenum = lmisflare;
	}
	if( gun_3 == 1 )
	{
		piecenum = rmisflare;
	}
	return (0);
}

FireSecondary()
{
	if( gun_3 == 0 )
	{
		gun_3 = 1;
		return (0);
	}
	if( gun_3 == 1 )
	{
		gun_3 = 0;
		return (0);
	}
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_3;
	bAiming = TRUE;
	while( !Static_Var_3 )
	{
		sleep 100;
	}
	turn turret to y-axis heading speed <300.000000>;
	turn misbarrel to x-axis <0.000000> - pitch speed <300.000000>;
	if (((get ABS(wpn3_lasthead - heading)) > 65536) OR(((get ABS(wpn3_lasthead - heading)) > 5000) AND ((get ABS(wpn3_lasthead - heading)) < 60536)))
	{
		wpn3_lasthead = 1000000;
		wait-for-turn turret around y-axis;
		wait-for-turn misbarrel around x-axis;
	}
	start-script RestoreAfterDelay();
	wpn3_lasthead = heading;
	return (1);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode pelvis type BITMAPONLY | NOHEATCLOUD;
		//explode rthigh type BITMAPONLY | NOHEATCLOUD;
		explode rleg type BITMAPONLY | NOHEATCLOUD;
		//explode rfoot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode prop type BITMAPONLY | NOHEATCLOUD;
		//explode lthigh type BITMAPONLY | NOHEATCLOUD;
		//explode lleg type BITMAPONLY | NOHEATCLOUD;
		//explode lfoot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode torso type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type BITMAPONLY | NOHEATCLOUD;
		//explode turret type BITMAPONLY | NOHEATCLOUD;
		//explode misbarrel type BITMAPONLY | NOHEATCLOUD;
		//explode lmisflare type BITMAPONLY | NOHEATCLOUD;
		//explode rmisflare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode pelvis type BITMAPONLY | NOHEATCLOUD;
		explode rthigh type FALL | NOHEATCLOUD;
		explode rleg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rfoot type FALL | NOHEATCLOUD;
		//explode prop type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lthigh type FALL | NOHEATCLOUD;
		//explode lleg type FALL | NOHEATCLOUD;
		//explode lfoot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode torso type FALL | NOHEATCLOUD;
		explode barrel type FALL | NOHEATCLOUD;
		//explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode misbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lmisflare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rmisflare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode pelvis type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rleg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rfoot type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode prop type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lthigh type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lleg type SMOKE | FALL | NOHEATCLOUD;
		//explode lfoot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode torso type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type SMOKE | FALL | NOHEATCLOUD;
		//explode flare type SMOKE | FALL | NOHEATCLOUD;
		//explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode misbarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lmisflare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rmisflare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode pelvis type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rfoot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode prop type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lleg type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode lfoot type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode torso type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode misbarrel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode lmisflare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode rmisflare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
