#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret1, wake, weight, turret2, doorr, doorl, boom2, boom3,
       boom1, boom4, link, boom5, boom6, boom7, boom8, boom9;

static-var  Static_Var_1, Wobble_status, TurretToUnitDistance, TurretToUnitAngleY, TurretToUnitAngleX, bInDistance;

// Signal definitions
#define SIG_MOVE			2
#define SIG_IDLE			4

WobbleUnit()
{
	while( TRUE )
	{
		if( Wobble_status)
		{
			if( get GROUND_WATER_HEIGHT(get UNIT_XZ) < 0 ) //Over Water
			{
				move base to y-axis [1.250000] speed [0.50000];
			}
			else
			{
				move base to y-axis [2.500000] speed [0.50000];
			}
		}
		else
		{
			if( get GROUND_WATER_HEIGHT(get UNIT_XZ) < 0 ) //Over Water
			{
				move base to y-axis [0.250000] speed [0.50000];
			}
			else
			{
				move base to y-axis [1.500000] speed [0.50000];
			}
		}
		Wobble_status = !Wobble_status;
		//get PRINT (get GROUND_WATER_HEIGHT(get UNIT_XZ));
		sleep 260;
	}
}

BankControl()
{
	var lastHeading, currHeading, diffHeading;
	lastHeading = GET HEADING;
	while (TRUE)
	{
		currHeading = GET HEADING;
		diffHeading = currHeading - lastHeading;
		// Set values for tilt

		//Remove Extreme values
		if ( diffHeading > 1250 ) diffHeading = 1250;
		if ( diffHeading < -1250 ) diffHeading = -1250;
		turn base to z-axis 1.0 * diffHeading speed <7>;
		
		lastHeading = currHeading;
		sleep 67;
	}
}

#define BASEPIECE base
#define HITSPEED <25.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 8
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

Create()
{
	hide wake;
	hide link;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script BankControl();
	start-script WobbleUnit();
}

HoverIdle()
{
	signal SIG_IDLE;
	set-signal-mask SIG_IDLE;
	while( TRUE )
	{
	    emit-sfx 1024 + 2 from wake;
	    sleep 1750;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	signal SIG_IDLE;
	var waketime;
	var bowtime;
	while( TRUE )
	{
		emit-sfx 1024 + 0 from wake;
		if (bowtime) emit-sfx 1024 + 1 from wake;
		bowtime = !bowtime;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 30 ) waketime = 30;
		sleep 15000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	signal SIG_IDLE;
	start-script HoverIdle();
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

StartDoorOpen()
{
	signal 4;
	set-signal-mask 4;
	turn doorr to z-axis <-90.000000> speed <100.000000>;
	turn doorl to z-axis <90.000000> speed <100.000000>;
	wait-for-turn doorr around z-axis;
	wait-for-turn doorl around z-axis;

	sleep 5000;

	turn doorr to z-axis <0.000000> speed <100.000000>;
	turn doorl to z-axis <0.000000> speed <100.000000>;
	wait-for-turn doorr around z-axis;
	wait-for-turn doorr around z-axis;

}

BoomCalc(posxz, posy)
{
	var Func_Var_3, Func_Var_4, Func_Var_5;
	Func_Var_3 = get PIECE_XZ(turret1) - posxz;
	Func_Var_4 = posy - get PIECE_Y(turret1) + [5.000000];
	Func_Var_5 = get XZ_HYPOT(Func_Var_3);
	TurretToUnitDistance = get HYPOT(Func_Var_5,Func_Var_4) - [15.000000];
	TurretToUnitAngleY = get XZ_ATAN(Func_Var_3);
	TurretToUnitAngleX = get ATAN(Func_Var_4,Func_Var_5);
	bInDistance = TurretToUnitDistance < [220.000000]; //MAX distance at which a unit is picked up/put down
//	get PRINT(1,bInDistance,TurretToUnitDistance/65000);
//	get PRINT(1,TurretToUnitAngleX/182, TurretToUnitAngleY/182);
}

BoomExtend()
{
	start-script StartDoorOpen();
	turn turret1 to y-axis TurretToUnitAngleY speed <200.000000>;
	wait-for-turn turret1 around y-axis;
	turn turret2 to x-axis <0.000000> - TurretToUnitAngleX speed <280.000000>;
	turn weight to x-axis TurretToUnitAngleX speed <280.000000>;
	wait-for-turn turret2 around x-axis;	
	move boom2 to z-axis TurretToUnitDistance / 8 speed [60.000000];
	move boom3 to z-axis TurretToUnitDistance / 8 speed [60.000000];
	move boom4 to z-axis TurretToUnitDistance / 8 speed [60.000000];
	move boom5 to z-axis TurretToUnitDistance / 8 speed [60.000000];
	move boom6 to z-axis TurretToUnitDistance / 8 speed [60.000000];
	move boom7 to z-axis TurretToUnitDistance / 8 speed [60.000000];
	move boom8 to z-axis TurretToUnitDistance / 8 speed [60.000000];
	move boom9 to z-axis TurretToUnitDistance / 8 speed [60.000000];

	wait-for-move boom2 along z-axis;
	wait-for-move boom3 along z-axis;
	wait-for-move boom4 along z-axis;
	wait-for-move boom5 along z-axis;
	wait-for-move boom6 along z-axis;
	wait-for-move boom7 along z-axis;
	wait-for-move boom8 along z-axis;
	wait-for-move boom9 along z-axis;
}

BoomReset()
{
	turn turret2 to x-axis <0.000000> speed <60.000000>;
	
	turn weight to x-axis <0.000000> speed <60.000000>;

	wait-for-turn turret2 around x-axis;
	turn turret1 to y-axis <0.000000> speed <200.000000>;
	move boom2 to z-axis [0.000000] speed [50.000000];
	move boom3 to z-axis [0.000000] speed [50.000000];
	move boom4 to z-axis [0.000000] speed [50.000000];
	move boom5 to z-axis [0.000000] speed [50.000000];
	move boom6 to z-axis [0.000000] speed [50.000000];
	move boom7 to z-axis [0.000000] speed [50.000000];
	move boom8 to z-axis [0.000000] speed [50.000000];
	move boom9 to z-axis [0.000000] speed [50.000000];
	wait-for-turn turret1 around y-axis;
	wait-for-move boom2 along z-axis;
	wait-for-move boom3 along z-axis;
	wait-for-move boom4 along z-axis;
	wait-for-move boom5 along z-axis;
	wait-for-move boom6 along z-axis;
	wait-for-move boom7 along z-axis;
	wait-for-move boom8 along z-axis;
	wait-for-move boom9 along z-axis;
}

BoomToPad()
{
	start-script StartDoorOpen();
	turn turret2 to x-axis <0.000000> speed <60.000000>;
	
	turn weight to x-axis <0.000000> speed <60.000000>;

	wait-for-turn boom1 around x-axis;
	turn turret1 to y-axis <0.000000> speed <200.000000>;
	move boom2 to z-axis [0.000000] speed [60.000000];
	move boom3 to z-axis [0.000000] speed [60.000000];
	move boom4 to z-axis [0.000000] speed [60.000000];
	move boom5 to z-axis [0.000000] speed [60.000000];
	move boom6 to z-axis [0.000000] speed [60.000000];
	move boom7 to z-axis [0.000000] speed [60.000000];
	move boom8 to z-axis [0.000000] speed [60.000000];
	move boom9 to z-axis [0.000000] speed [60.000000];
	wait-for-turn turret1 around y-axis;
	wait-for-turn turret2 around x-axis;
	wait-for-move boom2 along z-axis;
	wait-for-move boom3 along z-axis;
	wait-for-move boom4 along z-axis;
	wait-for-move boom5 along z-axis;
	wait-for-move boom6 along z-axis;
	wait-for-move boom7 along z-axis;
	wait-for-move boom8 along z-axis;
	wait-for-move boom9 along z-axis;
	turn turret2 to x-axis <30.000000> speed <60.000000>;
	
	turn weight to x-axis <-30.000000> speed <60.000000>;
	wait-for-turn turret2 around x-axis;
}

TransportPickup(unitid)
{
	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid) + get UNIT_HEIGHT(unitid));
	if( bInDistance AND get UNKNOWN_UNIT_VALUE(74)(unitid) == get UNKNOWN_UNIT_VALUE(74)(get UNKNOWN_UNIT_VALUE(71)) )
	{
		set BUSY to 1;
		call-script BoomExtend();
		move link to y-axis [0.000000] - get UNIT_HEIGHT(unitid) now;
		attach-unit unitid to link;
		call-script BoomToPad();
		attach-unit unitid to 0 - 1;
		call-script BoomReset();
		set BUSY to 0;
	}
}

TransportDrop(unitid, position)
{
	call-script BoomCalc(position,get GROUND_HEIGHT(position) + get UNIT_HEIGHT(unitid));
	if( bInDistance )
	{
		set BUSY to 1;
		call-script BoomToPad();
		//move link to y-axis [0.000000] - get UNIT_HEIGHT(unitid) now;
		attach-unit unitid to link;
		call-script BoomExtend();
		drop-unit unitid;
		call-script BoomReset();
		set BUSY to 0;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode doorr type BITMAPONLY | NOHEATCLOUD;
		explode doorl type BITMAPONLY | NOHEATCLOUD;
		explode turret1 type BITMAPONLY | NOHEATCLOUD;
		explode turret2 type BITMAPONLY | NOHEATCLOUD;
		explode weight type BITMAPONLY | NOHEATCLOUD;
		//explode boom1 type BITMAPONLY | NOHEATCLOUD;
		//explode boom2 type BITMAPONLY | NOHEATCLOUD;
		//explode boom3 type BITMAPONLY | NOHEATCLOUD;
		//explode boom4 type BITMAPONLY | NOHEATCLOUD;
		//explode boom5 type BITMAPONLY | NOHEATCLOUD;
		//explode boom6 type BITMAPONLY | NOHEATCLOUD;
		//explode boom7 type BITMAPONLY | NOHEATCLOUD;
		//explode boom8 type BITMAPONLY | NOHEATCLOUD;
		//explode boom9 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode link type BITMAPONLY | NOHEATCLOUD;
		//explode wake type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode doorr type FALL | NOHEATCLOUD;
		explode doorl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret1 type FALL | NOHEATCLOUD;
		explode turret2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode weight type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode boom1 type FALL | NOHEATCLOUD;
		//explode boom2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode boom3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode boom4 type FALL | NOHEATCLOUD;
		//explode boom5 type FALL | NOHEATCLOUD;
		//explode boom6 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode boom7 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode boom8 type FALL | NOHEATCLOUD;
		//explode boom9 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode link type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode doorr type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode doorl type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode turret1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode weight type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode boom1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode boom2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode boom3 type SMOKE | FALL | NOHEATCLOUD;
		//explode boom4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode boom5 type SMOKE | FALL | NOHEATCLOUD;
		//explode boom6 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode boom7 type SMOKE | FALL | NOHEATCLOUD;
		//explode boom8 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode boom9 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode link type SMOKE | FALL | NOHEATCLOUD;
		//explode wake type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode doorr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorl type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turret1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turret2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode weight type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode boom1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode boom2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode boom3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode boom4 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode boom5 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode boom6 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode boom7 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode boom8 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode boom9 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode link type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
