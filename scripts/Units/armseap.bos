#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  lwing, rwing, base, thrustm, lthrust, rthrust;

static-var  gun_3, Static_Var_2, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_MOVE			2


#define BASEPIECE base
#define HITSPEED <105.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 2
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

activatescr()
{
	if( TRUE )
	{
		turn rwing to z-axis <-85> speed <37.554945>;
		turn lwing to z-axis <85> speed <37.225275>;
		sleep 1397;
	}
	sleep 55;
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{

		turn rwing to z-axis <0> speed <37.554945>;
		turn lwing to z-axis <0> speed <37.225275>;
		sleep 1397;
	}
	sleep 66;
	return (0);
}


#define IDLEHOVERSCALE 32
#define IDLEHOVERSPEED 60
#define IDLEBASEPIECE base
#include "idlehover.h"


InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	hide lthrust;
	hide rthrust;
	hide thrustm;
	gun_3 = lwing;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script IdleHover();
}

Activate()
{
	show thrustm;
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	hide thrustm;
	start-script RequestState(1);
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;

}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = base;
	return (0);
}

FirePrimary()
{
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode lwing type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rwing type BITMAPONLY | NOHEATCLOUD;
		explode thrustm type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode lwing type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rwing type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode thrustm type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode lwing type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode rwing type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode thrustm type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode lwing type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode rwing type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode thrustm type BITMAPONLY | NOHEATCLOUD;
	return corpsetype;
}
