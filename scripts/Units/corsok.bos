#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  rmis, lmis, rlauncher, llauncher, flare, turret, wake, support, cannon,
       body, base;

static-var  Static_Var_1, gun_3, bAiming;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_3			4
#define SIG_MOVE			8
#define SIG_IDLE			16



#define BASEPIECE base
#define HITSPEED <25.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 10
#define MAXTILT 200

#include "unit_hitbyweaponid_and_smoke.h"

HoverIdle()
{
	signal SIG_IDLE;
	set-signal-mask SIG_IDLE;
	while( TRUE )
	{
	    emit-sfx 1024 + 2 from wake;
	    sleep 1800;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	signal SIG_IDLE;
	var waketime;
	var bowtime;
	while( TRUE )
	{
		emit-sfx 1024 + 0 from wake;
		if (bowtime) emit-sfx 1024 + 1 from wake;
		bowtime = !bowtime;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 30 ) waketime = 30;
		sleep 15000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	signal SIG_IDLE;
	start-script HoverIdle();
	return (0);
}

Create()
{
	hide wake;
	hide flare;
	hide rmis;
	hide lmis;
	cache body;
	cache turret;
	gun_3 = rmis;
	bAiming = FALSE;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret to y-axis <0.00000> speed <75.00000>;
	turn support to x-axis <0.00000> speed <50.00000>;
	cache support;
	cache cannon;
	cache turret;
	bAiming = FALSE;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep 8000;
	start-script ExecuteRestoreAfterDelay();
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

QueryTertiary(piecenum)
{
	piecenum = gun_3;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = body;
	return (0);
}

FirePrimary()
{	
	emit-sfx 1024 + 0 from flare;
	move cannon to z-axis [-10.00000] speed [1250.00000];
	sleep 150;
	move cannon to z-axis [0.00000] speed [7.50000];
	return (0);
}

FireTertiary()
{
	if( gun_3 == 0 )
	{
		move rlauncher to z-axis [-3.75000] speed [500.00000];
		sleep 450;
		move rlauncher to z-axis [0.00000] speed [5.00000];
	}
	if( gun_3 == 1 )
	{
		move llauncher to z-axis [-3.75000] speed [500.00000];
		sleep 450;
		move llauncher to z-axis [0.00000] speed [5.00000];
	}
	gun_3 = !gun_3;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	dont-cache turret;
	dont-cache support;
	dont-cache cannon;
	turn turret to y-axis heading speed <120.00000>;
	turn support to x-axis <0.00000> - pitch speed <80.00000>;
	wait-for-turn turret around y-axis;
	wait-for-turn support around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	return (1);
}

SweetSpot(piecenum)
{
	piecenum = body;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare;
	hide rmis;
	hide lmis;
	if( Static_Var_1 >= 4 )
	{
		if( severity <= 25 )
		{
			corpsetype = 1;
			explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
			return (corpsetype);
		}
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode cannon type FALL | BITMAP1 | NOHEATCLOUD;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | BITMAP4 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode cannon type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode body type FIRE | SMOKE | FALL | BITMAP4 | NOHEATCLOUD;
		//explode support type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		//explode rlauncher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		//explode llauncher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | BITMAP4 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode cannon type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
	explode body type FIRE | SMOKE | FALL | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
	explode support type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	//explode rlauncher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	//explode llauncher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	explode turret type FIRE | SMOKE | FALL | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
	return (corpsetype);
}
