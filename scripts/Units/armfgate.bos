#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, emit;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;

#define BASEPIECE base
#define HITSPEED <20.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

emitOn()
{
	Static_Var_1 = 1;
}

emitOff()
{
	Static_Var_1 = 0;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script emitOn();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script emitOff();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide emit;
	Static_Var_1 = 1;
	call-script InitState();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	sleep 100;
	return (Static_Var_1);
}

FirePrimary()
{
	sleep 100;
}

QueryPrimary(piecenum)
{
	piecenum = emit;
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

AimSecondary(heading, pitch)
{
	sleep 100;
	return (Static_Var_1);
}

FireSecondary()
{
	sleep 100;
}

QuerySecondary(piecenum)
{
	piecenum = base;
}

AimFromSecondary(piecenum)
{
	piecenum = base;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode emit type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode emit type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode emit type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode emit type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
