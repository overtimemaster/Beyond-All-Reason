#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  lflare, rflare, turret, base, rsleeve, lsleeve, rbarrel, lbarrel, rwheel, lwheel, laxle, raxle, smoke1, smoke2;

static-var  bMoving, moveSpeed, currentSpeed, animSpeed, terrain, restore_delay, gun_1;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE      4

UnitSpeed()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*20/moveSpeed;
		if (currentSpeed<4) currentSpeed=4;
		animSpeed = 1800 / currentSpeed;
		sleep 142;
	}
}

Smoke()
{
	while( TRUE )
	{
		if ( bMoving )
		{
			if( terrain == 4 )
			{
				emit-sfx 1024 + 1 from smoke1;
				emit-sfx 1024 + 1 from smoke2;
			}
		}
		sleep animSpeed;
	}
}



#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 6
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.000000>;
	turn base to z-axis <0> - anglez speed <50.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

Create()
{
	hide smoke1;
	hide rflare;
	hide lflare;
	hide smoke2;
	bMoving = FALSE;
	moveSpeed = get (MAX_SPEED);
	animSpeed = 100;
	gun_1 = lflare;
	restore_delay = 3000;
}

setSFXoccupy(state)
{
	terrain = state;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

StartMoving()
{
	bMoving = TRUE;
	spin lwheel around x-axis speed <110> accelerate <5>;
	spin rwheel around x-axis speed <110> accelerate <5>;
  
  signal SIG_MOVE;
  set-signal-mask SIG_MOVE;
  start-script UnitSpeed();
	start-script Smoke();
}


StopMoving()
{
	bMoving = FALSE;
  signal SIG_MOVE;
	stop-spin lwheel around x-axis;
	stop-spin rwheel around x-axis;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <50.000000>;
	turn rsleeve to x-axis <0.000000> speed <25.000000>;
	turn lsleeve to x-axis <0.000000> speed <25.000000>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <105.000000>;
	turn rsleeve to x-axis <0.000000> - pitch speed <65.000000>;
	turn lsleeve to x-axis <0.000000> - pitch speed <65.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn rsleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		move lbarrel to z-axis [-2.400000] speed [500.000000];
		emit-sfx 1024 + 0 from lflare;
		sleep 150;
		wait-for-move lbarrel along z-axis;
		move lbarrel to z-axis [0.000000] speed [3.000000];
		gun_1 = rflare;
		return (0);
	}
	if( gun_1 == 1 )
	{
		move rbarrel to z-axis [-2.400000] speed [500.000000];
		emit-sfx 1024 + 0 from rflare;
		sleep 150;
		wait-for-move rbarrel along z-axis;
		move rbarrel to z-axis [0.000000] speed [3.000000];
		gun_1 = lflare;
	}
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = lflare;
	}
	if( gun_1 == 1 )
	{
		piecenum = rflare;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode raxle type BITMAPONLY | NOHEATCLOUD;
		explode rwheel type BITMAPONLY | NOHEATCLOUD;
		//explode turret type BITMAPONLY | NOHEATCLOUD;
		//explode rsleeve type BITMAPONLY | NOHEATCLOUD;
		//explode rbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rflare type BITMAPONLY | NOHEATCLOUD;
		//explode lsleeve type BITMAPONLY | NOHEATCLOUD;
		//explode lbarrel type BITMAPONLY | NOHEATCLOUD;
		//explode lflare type BITMAPONLY | NOHEATCLOUD;
		//explode laxle type BITMAPONLY | NOHEATCLOUD;
		//explode lwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode raxle type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rsleeve type FALL | NOHEATCLOUD;
		//explode rbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rflare type FALL | NOHEATCLOUD;
		//explode lsleeve type FALL | NOHEATCLOUD;
		//explode lbarrel type FALL | NOHEATCLOUD;
		//explode lflare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode laxle type FALL | NOHEATCLOUD;
		//explode lwheel type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode raxle type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rwheel type SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rsleeve type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rbarrel type SMOKE | FALL | NOHEATCLOUD;
		//explode rflare type SMOKE | FALL | NOHEATCLOUD;
		//explode lsleeve type SMOKE | FALL | NOHEATCLOUD;
		//explode lbarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lflare type SMOKE | FALL | NOHEATCLOUD;
		//explode laxle type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode raxle type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rwheel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rsleeve type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode rbarrel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode rflare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lsleeve type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode lbarrel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode lflare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode laxle type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lwheel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
