#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare1, flare2, turret, sleeve;

static-var  gun_1, rockframe, Xrot, Zrot, Ymove;
static-var  Stunned;

// Signal definitions
#define SIG_AIM				2

RockOnWaves()
{
    rockframe = 1;
    while ( TRUE )
    {
        Xrot = (get KCOS (rockframe * 690)) * 360 / 1024 ;
        Ymove = (get KSIN (rockframe * 650)) * 2;
        Zrot = (get KSIN (rockframe * 560)) * 360 / 1024;
        turn base to x-axis Xrot now;
        turn base to z-axis Zrot now;
        move base to y-axis Ymove now;
        rockframe = rockframe + 1;
        sleep 1;
    }
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <15.00000>;
	turn base to z-axis anglez speed <15.00000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to x-axis <0.00000> - anglex speed <12.00000>;
	turn base to z-axis <0.00000> - anglez speed <12.00000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to x-axis anglex / <0.01099> speed <9.00000>;
	turn base to z-axis anglez / <0.01099> speed <9.00000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to x-axis <0.00000> speed <3.00000>;
	turn base to z-axis <0.00000> speed <3.00000>;
	sleep 150;
	return (0);
}


Create()
{
	hide flare1;
	hide flare2;
	hide flare1;
	hide flare2;
	gun_1 = flare1;
	start-script RockOnWaves();

	turn turret to x-axis <-35> speed <25.00000>;
	spin turret around y-axis speed <25.0>;
	return (0);
}
Stop()
{
	spin turret around y-axis speed <0.0>;
	return (0);
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret to x-axis <-25> speed <25.00000>;
	spin turret around y-axis speed <25.0>;
}
SetStunned(State)
{
    Stunned = State;
	if (Stunned) {
	    call-script Stop();
	} else {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep 5000;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <450.00000>;
	turn sleeve to x-axis <0.00000> - pitch speed <450.00000>;
	wait-for-turn sleeve around z-axis;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	++gun_1;
	if( gun_1 == 3 )
	{
		gun_1 = flare1;
	}
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		//explode base type FALL | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		//explode base type FALL | NOHEATCLOUD;
		explode flare1 type FALL | BITMAP3 | NOHEATCLOUD;
		explode turret type FALL | BITMAP5 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		//explode base type FALL | NOHEATCLOUD;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	//explode base type FALL | NOHEATCLOUD;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5 | NOHEATCLOUD;
	return (corpsetype);
}
