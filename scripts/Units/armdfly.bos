#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, link, flare, barrel, fan1,fan2,fan3,fan4,thrusta,thrustb;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;


activatescr()
{
	if( TRUE )
	{
		spin fan1 around y-axis speed <360> accelerate <10>;
		spin fan2 around y-axis speed <360> accelerate <10>;
		spin fan3 around y-axis speed <360> accelerate <10>;
		spin fan4 around y-axis speed <360> accelerate <10>;
	}
	sleep 44;
}

deactivatescr()
{
	if( TRUE )
	{
		
		stop-spin fan1 around y-axis decelerate <20>;

	}
}


#define BASEPIECE base
#define HITSPEED <105.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"


#define IDLEHOVERSCALE 32
#define IDLEHOVERSPEED 60
#define IDLEBASEPIECE base
#include "idlehover.h"


InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide flare;
	hide link;
	hide thrusta;
	hide thrustb;
	Static_Var_1 = 0;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script IdleHover();
}

Activate()
{
	show thrusta;
	show thrustb;
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	hide thrusta;
	hide thrustb;
	start-script RequestState(1);
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryTransport(Func_Var_1)
{
	Func_Var_1 = 1;
}

BeginTransport(Func_Var_1)
{
	move link to y-axis [0.000000] - Func_Var_1 now;
	start-script RequestState(0);
}

EndTransport()
{
	start-script RequestState(1);
}



AimPrimary(heading,pitch)
{
	turn barrel to x-axis -1 * pitch speed <100>;
	wait-for-turn barrel around x-axis;
	return (1);
}

FirePrimary()
{
	sleep 100;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = flare;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | NOHEATCLOUD;
	return corpsetype;
}
